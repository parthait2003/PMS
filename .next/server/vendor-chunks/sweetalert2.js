"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sweetalert2";
exports.ids = ["vendor-chunks/sweetalert2"];
exports.modules = {

/***/ "(ssr)/./node_modules/sweetalert2/dist/sweetalert2.esm.all.js":
/*!**************************************************************!*\
  !*** ./node_modules/sweetalert2/dist/sweetalert2.esm.all.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Swal)\n/* harmony export */ });\n/*!\n* sweetalert2 v11.17.2\n* Released under the MIT License.\n*/ function _assertClassBrand(e, t, n) {\n    if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n    throw new TypeError(\"Private element is not present on this object\");\n}\nfunction _checkPrivateRedeclaration(e, t) {\n    if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classPrivateFieldGet2(s, a) {\n    return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n    _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _classPrivateFieldSet2(s, a, r) {\n    return s.set(_assertClassBrand(s, a), r), r;\n}\nconst RESTORE_FOCUS_TIMEOUT = 100;\n/** @type {GlobalState} */ const globalState = {};\nconst focusPreviousActiveElement = ()=>{\n    if (globalState.previousActiveElement instanceof HTMLElement) {\n        globalState.previousActiveElement.focus();\n        globalState.previousActiveElement = null;\n    } else if (document.body) {\n        document.body.focus();\n    }\n};\n/**\n * Restore previous active (focused) element\n *\n * @param {boolean} returnFocus\n * @returns {Promise<void>}\n */ const restoreActiveElement = (returnFocus)=>{\n    return new Promise((resolve)=>{\n        if (!returnFocus) {\n            return resolve();\n        }\n        const x = window.scrollX;\n        const y = window.scrollY;\n        globalState.restoreFocusTimeout = setTimeout(()=>{\n            focusPreviousActiveElement();\n            resolve();\n        }, RESTORE_FOCUS_TIMEOUT); // issues/900\n        window.scrollTo(x, y);\n    });\n};\nconst swalPrefix = \"swal2-\";\n/**\n * @typedef {Record<SwalClass, string>} SwalClasses\n */ /**\n * @typedef {'success' | 'warning' | 'info' | 'question' | 'error'} SwalIcon\n * @typedef {Record<SwalIcon, string>} SwalIcons\n */ /** @type {SwalClass[]} */ const classNames = [\n    \"container\",\n    \"shown\",\n    \"height-auto\",\n    \"iosfix\",\n    \"popup\",\n    \"modal\",\n    \"no-backdrop\",\n    \"no-transition\",\n    \"toast\",\n    \"toast-shown\",\n    \"show\",\n    \"hide\",\n    \"close\",\n    \"title\",\n    \"html-container\",\n    \"actions\",\n    \"confirm\",\n    \"deny\",\n    \"cancel\",\n    \"default-outline\",\n    \"footer\",\n    \"icon\",\n    \"icon-content\",\n    \"image\",\n    \"input\",\n    \"file\",\n    \"range\",\n    \"select\",\n    \"radio\",\n    \"checkbox\",\n    \"label\",\n    \"textarea\",\n    \"inputerror\",\n    \"input-label\",\n    \"validation-message\",\n    \"progress-steps\",\n    \"active-progress-step\",\n    \"progress-step\",\n    \"progress-step-line\",\n    \"loader\",\n    \"loading\",\n    \"styled\",\n    \"top\",\n    \"top-start\",\n    \"top-end\",\n    \"top-left\",\n    \"top-right\",\n    \"center\",\n    \"center-start\",\n    \"center-end\",\n    \"center-left\",\n    \"center-right\",\n    \"bottom\",\n    \"bottom-start\",\n    \"bottom-end\",\n    \"bottom-left\",\n    \"bottom-right\",\n    \"grow-row\",\n    \"grow-column\",\n    \"grow-fullscreen\",\n    \"rtl\",\n    \"timer-progress-bar\",\n    \"timer-progress-bar-container\",\n    \"scrollbar-measure\",\n    \"icon-success\",\n    \"icon-warning\",\n    \"icon-info\",\n    \"icon-question\",\n    \"icon-error\",\n    \"draggable\",\n    \"dragging\"\n];\nconst swalClasses = classNames.reduce((acc, className)=>{\n    acc[className] = swalPrefix + className;\n    return acc;\n}, /** @type {SwalClasses} */ {});\n/** @type {SwalIcon[]} */ const icons = [\n    \"success\",\n    \"warning\",\n    \"info\",\n    \"question\",\n    \"error\"\n];\nconst iconTypes = icons.reduce((acc, icon)=>{\n    acc[icon] = swalPrefix + icon;\n    return acc;\n}, /** @type {SwalIcons} */ {});\nconst consolePrefix = \"SweetAlert2:\";\n/**\n * Capitalize the first letter of a string\n *\n * @param {string} str\n * @returns {string}\n */ const capitalizeFirstLetter = (str)=>str.charAt(0).toUpperCase() + str.slice(1);\n/**\n * Standardize console warnings\n *\n * @param {string | string[]} message\n */ const warn = (message)=>{\n    console.warn(`${consolePrefix} ${typeof message === \"object\" ? message.join(\" \") : message}`);\n};\n/**\n * Standardize console errors\n *\n * @param {string} message\n */ const error = (message)=>{\n    console.error(`${consolePrefix} ${message}`);\n};\n/**\n * Private global state for `warnOnce`\n *\n * @type {string[]}\n * @private\n */ const previousWarnOnceMessages = [];\n/**\n * Show a console warning, but only if it hasn't already been shown\n *\n * @param {string} message\n */ const warnOnce = (message)=>{\n    if (!previousWarnOnceMessages.includes(message)) {\n        previousWarnOnceMessages.push(message);\n        warn(message);\n    }\n};\n/**\n * Show a one-time console warning about deprecated params/methods\n *\n * @param {string} deprecatedParam\n * @param {string?} useInstead\n */ const warnAboutDeprecation = function(deprecatedParam) {\n    let useInstead = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    warnOnce(`\"${deprecatedParam}\" is deprecated and will be removed in the next major release.${useInstead ? ` Use \"${useInstead}\" instead.` : \"\"}`);\n};\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n *\n * @param {Function | any} arg\n * @returns {any}\n */ const callIfFunction = (arg)=>typeof arg === \"function\" ? arg() : arg;\n/**\n * @param {any} arg\n * @returns {boolean}\n */ const hasToPromiseFn = (arg)=>arg && typeof arg.toPromise === \"function\";\n/**\n * @param {any} arg\n * @returns {Promise<any>}\n */ const asPromise = (arg)=>hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);\n/**\n * @param {any} arg\n * @returns {boolean}\n */ const isPromise = (arg)=>arg && Promise.resolve(arg) === arg;\n/**\n * Gets the popup container which contains the backdrop and the popup itself.\n *\n * @returns {HTMLElement | null}\n */ const getContainer = ()=>document.body.querySelector(`.${swalClasses.container}`);\n/**\n * @param {string} selectorString\n * @returns {HTMLElement | null}\n */ const elementBySelector = (selectorString)=>{\n    const container = getContainer();\n    return container ? container.querySelector(selectorString) : null;\n};\n/**\n * @param {string} className\n * @returns {HTMLElement | null}\n */ const elementByClass = (className)=>{\n    return elementBySelector(`.${className}`);\n};\n/**\n * @returns {HTMLElement | null}\n */ const getPopup = ()=>elementByClass(swalClasses.popup);\n/**\n * @returns {HTMLElement | null}\n */ const getIcon = ()=>elementByClass(swalClasses.icon);\n/**\n * @returns {HTMLElement | null}\n */ const getIconContent = ()=>elementByClass(swalClasses[\"icon-content\"]);\n/**\n * @returns {HTMLElement | null}\n */ const getTitle = ()=>elementByClass(swalClasses.title);\n/**\n * @returns {HTMLElement | null}\n */ const getHtmlContainer = ()=>elementByClass(swalClasses[\"html-container\"]);\n/**\n * @returns {HTMLElement | null}\n */ const getImage = ()=>elementByClass(swalClasses.image);\n/**\n * @returns {HTMLElement | null}\n */ const getProgressSteps = ()=>elementByClass(swalClasses[\"progress-steps\"]);\n/**\n * @returns {HTMLElement | null}\n */ const getValidationMessage = ()=>elementByClass(swalClasses[\"validation-message\"]);\n/**\n * @returns {HTMLButtonElement | null}\n */ const getConfirmButton = ()=>/** @type {HTMLButtonElement} */ elementBySelector(`.${swalClasses.actions} .${swalClasses.confirm}`);\n/**\n * @returns {HTMLButtonElement | null}\n */ const getCancelButton = ()=>/** @type {HTMLButtonElement} */ elementBySelector(`.${swalClasses.actions} .${swalClasses.cancel}`);\n/**\n * @returns {HTMLButtonElement | null}\n */ const getDenyButton = ()=>/** @type {HTMLButtonElement} */ elementBySelector(`.${swalClasses.actions} .${swalClasses.deny}`);\n/**\n * @returns {HTMLElement | null}\n */ const getInputLabel = ()=>elementByClass(swalClasses[\"input-label\"]);\n/**\n * @returns {HTMLElement | null}\n */ const getLoader = ()=>elementBySelector(`.${swalClasses.loader}`);\n/**\n * @returns {HTMLElement | null}\n */ const getActions = ()=>elementByClass(swalClasses.actions);\n/**\n * @returns {HTMLElement | null}\n */ const getFooter = ()=>elementByClass(swalClasses.footer);\n/**\n * @returns {HTMLElement | null}\n */ const getTimerProgressBar = ()=>elementByClass(swalClasses[\"timer-progress-bar\"]);\n/**\n * @returns {HTMLElement | null}\n */ const getCloseButton = ()=>elementByClass(swalClasses.close);\n// https://github.com/jkup/focusable/blob/master/index.js\nconst focusable = `\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex=\"0\"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n`;\n/**\n * @returns {HTMLElement[]}\n */ const getFocusableElements = ()=>{\n    const popup = getPopup();\n    if (!popup) {\n        return [];\n    }\n    /** @type {NodeListOf<HTMLElement>} */ const focusableElementsWithTabindex = popup.querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])');\n    const focusableElementsWithTabindexSorted = Array.from(focusableElementsWithTabindex)// sort according to tabindex\n    .sort((a, b)=>{\n        const tabindexA = parseInt(a.getAttribute(\"tabindex\") || \"0\");\n        const tabindexB = parseInt(b.getAttribute(\"tabindex\") || \"0\");\n        if (tabindexA > tabindexB) {\n            return 1;\n        } else if (tabindexA < tabindexB) {\n            return -1;\n        }\n        return 0;\n    });\n    /** @type {NodeListOf<HTMLElement>} */ const otherFocusableElements = popup.querySelectorAll(focusable);\n    const otherFocusableElementsFiltered = Array.from(otherFocusableElements).filter((el)=>el.getAttribute(\"tabindex\") !== \"-1\");\n    return [\n        ...new Set(focusableElementsWithTabindexSorted.concat(otherFocusableElementsFiltered))\n    ].filter((el)=>isVisible$1(el));\n};\n/**\n * @returns {boolean}\n */ const isModal = ()=>{\n    return hasClass(document.body, swalClasses.shown) && !hasClass(document.body, swalClasses[\"toast-shown\"]) && !hasClass(document.body, swalClasses[\"no-backdrop\"]);\n};\n/**\n * @returns {boolean}\n */ const isToast = ()=>{\n    const popup = getPopup();\n    if (!popup) {\n        return false;\n    }\n    return hasClass(popup, swalClasses.toast);\n};\n/**\n * @returns {boolean}\n */ const isLoading = ()=>{\n    const popup = getPopup();\n    if (!popup) {\n        return false;\n    }\n    return popup.hasAttribute(\"data-loading\");\n};\n/**\n * Securely set innerHTML of an element\n * https://github.com/sweetalert2/sweetalert2/issues/1926\n *\n * @param {HTMLElement} elem\n * @param {string} html\n */ const setInnerHtml = (elem, html)=>{\n    elem.textContent = \"\";\n    if (html) {\n        const parser = new DOMParser();\n        const parsed = parser.parseFromString(html, `text/html`);\n        const head = parsed.querySelector(\"head\");\n        if (head) {\n            Array.from(head.childNodes).forEach((child)=>{\n                elem.appendChild(child);\n            });\n        }\n        const body = parsed.querySelector(\"body\");\n        if (body) {\n            Array.from(body.childNodes).forEach((child)=>{\n                if (child instanceof HTMLVideoElement || child instanceof HTMLAudioElement) {\n                    elem.appendChild(child.cloneNode(true)); // https://github.com/sweetalert2/sweetalert2/issues/2507\n                } else {\n                    elem.appendChild(child);\n                }\n            });\n        }\n    }\n};\n/**\n * @param {HTMLElement} elem\n * @param {string} className\n * @returns {boolean}\n */ const hasClass = (elem, className)=>{\n    if (!className) {\n        return false;\n    }\n    const classList = className.split(/\\s+/);\n    for(let i = 0; i < classList.length; i++){\n        if (!elem.classList.contains(classList[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param {HTMLElement} elem\n * @param {SweetAlertOptions} params\n */ const removeCustomClasses = (elem, params)=>{\n    Array.from(elem.classList).forEach((className)=>{\n        if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass || {}).includes(className)) {\n            elem.classList.remove(className);\n        }\n    });\n};\n/**\n * @param {HTMLElement} elem\n * @param {SweetAlertOptions} params\n * @param {string} className\n */ const applyCustomClass = (elem, params, className)=>{\n    removeCustomClasses(elem, params);\n    if (!params.customClass) {\n        return;\n    }\n    const customClass = params.customClass[/** @type {keyof SweetAlertCustomClass} */ className];\n    if (!customClass) {\n        return;\n    }\n    if (typeof customClass !== \"string\" && !customClass.forEach) {\n        warn(`Invalid type of customClass.${className}! Expected string or iterable object, got \"${typeof customClass}\"`);\n        return;\n    }\n    addClass(elem, customClass);\n};\n/**\n * @param {HTMLElement} popup\n * @param {import('./renderers/renderInput').InputClass | SweetAlertInput} inputClass\n * @returns {HTMLInputElement | null}\n */ const getInput$1 = (popup, inputClass)=>{\n    if (!inputClass) {\n        return null;\n    }\n    switch(inputClass){\n        case \"select\":\n        case \"textarea\":\n        case \"file\":\n            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses[inputClass]}`);\n        case \"checkbox\":\n            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.checkbox} input`);\n        case \"radio\":\n            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:checked`) || popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:first-child`);\n        case \"range\":\n            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.range} input`);\n        default:\n            return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.input}`);\n    }\n};\n/**\n * @param {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} input\n */ const focusInput = (input)=>{\n    input.focus();\n    // place cursor at end of text in text input\n    if (input.type !== \"file\") {\n        // http://stackoverflow.com/a/2345915\n        const val = input.value;\n        input.value = \"\";\n        input.value = val;\n    }\n};\n/**\n * @param {HTMLElement | HTMLElement[] | null} target\n * @param {string | string[] | readonly string[] | undefined} classList\n * @param {boolean} condition\n */ const toggleClass = (target, classList, condition)=>{\n    if (!target || !classList) {\n        return;\n    }\n    if (typeof classList === \"string\") {\n        classList = classList.split(/\\s+/).filter(Boolean);\n    }\n    classList.forEach((className)=>{\n        if (Array.isArray(target)) {\n            target.forEach((elem)=>{\n                if (condition) {\n                    elem.classList.add(className);\n                } else {\n                    elem.classList.remove(className);\n                }\n            });\n        } else {\n            if (condition) {\n                target.classList.add(className);\n            } else {\n                target.classList.remove(className);\n            }\n        }\n    });\n};\n/**\n * @param {HTMLElement | HTMLElement[] | null} target\n * @param {string | string[] | readonly string[] | undefined} classList\n */ const addClass = (target, classList)=>{\n    toggleClass(target, classList, true);\n};\n/**\n * @param {HTMLElement | HTMLElement[] | null} target\n * @param {string | string[] | readonly string[] | undefined} classList\n */ const removeClass = (target, classList)=>{\n    toggleClass(target, classList, false);\n};\n/**\n * Get direct child of an element by class name\n *\n * @param {HTMLElement} elem\n * @param {string} className\n * @returns {HTMLElement | undefined}\n */ const getDirectChildByClass = (elem, className)=>{\n    const children = Array.from(elem.children);\n    for(let i = 0; i < children.length; i++){\n        const child = children[i];\n        if (child instanceof HTMLElement && hasClass(child, className)) {\n            return child;\n        }\n    }\n};\n/**\n * @param {HTMLElement} elem\n * @param {string} property\n * @param {*} value\n */ const applyNumericalStyle = (elem, property, value)=>{\n    if (value === `${parseInt(value)}`) {\n        value = parseInt(value);\n    }\n    if (value || parseInt(value) === 0) {\n        elem.style.setProperty(property, typeof value === \"number\" ? `${value}px` : value);\n    } else {\n        elem.style.removeProperty(property);\n    }\n};\n/**\n * @param {HTMLElement | null} elem\n * @param {string} display\n */ const show = function(elem) {\n    let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"flex\";\n    if (!elem) {\n        return;\n    }\n    elem.style.display = display;\n};\n/**\n * @param {HTMLElement | null} elem\n */ const hide = (elem)=>{\n    if (!elem) {\n        return;\n    }\n    elem.style.display = \"none\";\n};\n/**\n * @param {HTMLElement | null} elem\n * @param {string} display\n */ const showWhenInnerHtmlPresent = function(elem) {\n    let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"block\";\n    if (!elem) {\n        return;\n    }\n    new MutationObserver(()=>{\n        toggle(elem, elem.innerHTML, display);\n    }).observe(elem, {\n        childList: true,\n        subtree: true\n    });\n};\n/**\n * @param {HTMLElement} parent\n * @param {string} selector\n * @param {string} property\n * @param {string} value\n */ const setStyle = (parent, selector, property, value)=>{\n    /** @type {HTMLElement | null} */ const el = parent.querySelector(selector);\n    if (el) {\n        el.style.setProperty(property, value);\n    }\n};\n/**\n * @param {HTMLElement} elem\n * @param {any} condition\n * @param {string} display\n */ const toggle = function(elem, condition) {\n    let display = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"flex\";\n    if (condition) {\n        show(elem, display);\n    } else {\n        hide(elem);\n    }\n};\n/**\n * borrowed from jquery $(elem).is(':visible') implementation\n *\n * @param {HTMLElement | null} elem\n * @returns {boolean}\n */ const isVisible$1 = (elem)=>!!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));\n/**\n * @returns {boolean}\n */ const allButtonsAreHidden = ()=>!isVisible$1(getConfirmButton()) && !isVisible$1(getDenyButton()) && !isVisible$1(getCancelButton());\n/**\n * @param {HTMLElement} elem\n * @returns {boolean}\n */ const isScrollable = (elem)=>!!(elem.scrollHeight > elem.clientHeight);\n/**\n * borrowed from https://stackoverflow.com/a/46352119\n *\n * @param {HTMLElement} elem\n * @returns {boolean}\n */ const hasCssAnimation = (elem)=>{\n    const style = window.getComputedStyle(elem);\n    const animDuration = parseFloat(style.getPropertyValue(\"animation-duration\") || \"0\");\n    const transDuration = parseFloat(style.getPropertyValue(\"transition-duration\") || \"0\");\n    return animDuration > 0 || transDuration > 0;\n};\n/**\n * @param {number} timer\n * @param {boolean} reset\n */ const animateTimerProgressBar = function(timer) {\n    let reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const timerProgressBar = getTimerProgressBar();\n    if (!timerProgressBar) {\n        return;\n    }\n    if (isVisible$1(timerProgressBar)) {\n        if (reset) {\n            timerProgressBar.style.transition = \"none\";\n            timerProgressBar.style.width = \"100%\";\n        }\n        setTimeout(()=>{\n            timerProgressBar.style.transition = `width ${timer / 1000}s linear`;\n            timerProgressBar.style.width = \"0%\";\n        }, 10);\n    }\n};\nconst stopTimerProgressBar = ()=>{\n    const timerProgressBar = getTimerProgressBar();\n    if (!timerProgressBar) {\n        return;\n    }\n    const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    timerProgressBar.style.removeProperty(\"transition\");\n    timerProgressBar.style.width = \"100%\";\n    const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    const timerProgressBarPercent = timerProgressBarWidth / timerProgressBarFullWidth * 100;\n    timerProgressBar.style.width = `${timerProgressBarPercent}%`;\n};\n/**\n * Detect Node env\n *\n * @returns {boolean}\n */ const isNodeEnv = ()=> true || 0;\nconst sweetHTML = `\n <div aria-labelledby=\"${swalClasses.title}\" aria-describedby=\"${swalClasses[\"html-container\"]}\" class=\"${swalClasses.popup}\" tabindex=\"-1\">\n   <button type=\"button\" class=\"${swalClasses.close}\"></button>\n   <ul class=\"${swalClasses[\"progress-steps\"]}\"></ul>\n   <div class=\"${swalClasses.icon}\"></div>\n   <img class=\"${swalClasses.image}\" />\n   <h2 class=\"${swalClasses.title}\" id=\"${swalClasses.title}\"></h2>\n   <div class=\"${swalClasses[\"html-container\"]}\" id=\"${swalClasses[\"html-container\"]}\"></div>\n   <input class=\"${swalClasses.input}\" id=\"${swalClasses.input}\" />\n   <input type=\"file\" class=\"${swalClasses.file}\" />\n   <div class=\"${swalClasses.range}\">\n     <input type=\"range\" />\n     <output></output>\n   </div>\n   <select class=\"${swalClasses.select}\" id=\"${swalClasses.select}\"></select>\n   <div class=\"${swalClasses.radio}\"></div>\n   <label class=\"${swalClasses.checkbox}\">\n     <input type=\"checkbox\" id=\"${swalClasses.checkbox}\" />\n     <span class=\"${swalClasses.label}\"></span>\n   </label>\n   <textarea class=\"${swalClasses.textarea}\" id=\"${swalClasses.textarea}\"></textarea>\n   <div class=\"${swalClasses[\"validation-message\"]}\" id=\"${swalClasses[\"validation-message\"]}\"></div>\n   <div class=\"${swalClasses.actions}\">\n     <div class=\"${swalClasses.loader}\"></div>\n     <button type=\"button\" class=\"${swalClasses.confirm}\"></button>\n     <button type=\"button\" class=\"${swalClasses.deny}\"></button>\n     <button type=\"button\" class=\"${swalClasses.cancel}\"></button>\n   </div>\n   <div class=\"${swalClasses.footer}\"></div>\n   <div class=\"${swalClasses[\"timer-progress-bar-container\"]}\">\n     <div class=\"${swalClasses[\"timer-progress-bar\"]}\"></div>\n   </div>\n </div>\n`.replace(/(^|\\n)\\s*/g, \"\");\n/**\n * @returns {boolean}\n */ const resetOldContainer = ()=>{\n    const oldContainer = getContainer();\n    if (!oldContainer) {\n        return false;\n    }\n    oldContainer.remove();\n    removeClass([\n        document.documentElement,\n        document.body\n    ], [\n        swalClasses[\"no-backdrop\"],\n        swalClasses[\"toast-shown\"],\n        swalClasses[\"has-column\"]\n    ]);\n    return true;\n};\nconst resetValidationMessage$1 = ()=>{\n    globalState.currentInstance.resetValidationMessage();\n};\nconst addInputChangeListeners = ()=>{\n    const popup = getPopup();\n    const input = getDirectChildByClass(popup, swalClasses.input);\n    const file = getDirectChildByClass(popup, swalClasses.file);\n    /** @type {HTMLInputElement} */ const range = popup.querySelector(`.${swalClasses.range} input`);\n    /** @type {HTMLOutputElement} */ const rangeOutput = popup.querySelector(`.${swalClasses.range} output`);\n    const select = getDirectChildByClass(popup, swalClasses.select);\n    /** @type {HTMLInputElement} */ const checkbox = popup.querySelector(`.${swalClasses.checkbox} input`);\n    const textarea = getDirectChildByClass(popup, swalClasses.textarea);\n    input.oninput = resetValidationMessage$1;\n    file.onchange = resetValidationMessage$1;\n    select.onchange = resetValidationMessage$1;\n    checkbox.onchange = resetValidationMessage$1;\n    textarea.oninput = resetValidationMessage$1;\n    range.oninput = ()=>{\n        resetValidationMessage$1();\n        rangeOutput.value = range.value;\n    };\n    range.onchange = ()=>{\n        resetValidationMessage$1();\n        rangeOutput.value = range.value;\n    };\n};\n/**\n * @param {string | HTMLElement} target\n * @returns {HTMLElement}\n */ const getTarget = (target)=>typeof target === \"string\" ? document.querySelector(target) : target;\n/**\n * @param {SweetAlertOptions} params\n */ const setupAccessibility = (params)=>{\n    const popup = getPopup();\n    popup.setAttribute(\"role\", params.toast ? \"alert\" : \"dialog\");\n    popup.setAttribute(\"aria-live\", params.toast ? \"polite\" : \"assertive\");\n    if (!params.toast) {\n        popup.setAttribute(\"aria-modal\", \"true\");\n    }\n};\n/**\n * @param {HTMLElement} targetElement\n */ const setupRTL = (targetElement)=>{\n    if (window.getComputedStyle(targetElement).direction === \"rtl\") {\n        addClass(getContainer(), swalClasses.rtl);\n    }\n};\n/**\n * Add modal + backdrop + no-war message for Russians to DOM\n *\n * @param {SweetAlertOptions} params\n */ const init = (params)=>{\n    // Clean up the old popup container if it exists\n    const oldContainerExisted = resetOldContainer();\n    if (isNodeEnv()) {\n        error(\"SweetAlert2 requires document to initialize\");\n        return;\n    }\n    const container = document.createElement(\"div\");\n    container.className = swalClasses.container;\n    if (oldContainerExisted) {\n        addClass(container, swalClasses[\"no-transition\"]);\n    }\n    setInnerHtml(container, sweetHTML);\n    container.dataset[\"swal2Theme\"] = params.theme;\n    const targetElement = getTarget(params.target);\n    targetElement.appendChild(container);\n    setupAccessibility(params);\n    setupRTL(targetElement);\n    addInputChangeListeners();\n};\n/**\n * @param {HTMLElement | object | string} param\n * @param {HTMLElement} target\n */ const parseHtmlToContainer = (param, target)=>{\n    // DOM element\n    if (param instanceof HTMLElement) {\n        target.appendChild(param);\n    } else if (typeof param === \"object\") {\n        handleObject(param, target);\n    } else if (param) {\n        setInnerHtml(target, param);\n    }\n};\n/**\n * @param {any} param\n * @param {HTMLElement} target\n */ const handleObject = (param, target)=>{\n    // JQuery element(s)\n    if (param.jquery) {\n        handleJqueryElem(target, param);\n    } else {\n        setInnerHtml(target, param.toString());\n    }\n};\n/**\n * @param {HTMLElement} target\n * @param {any} elem\n */ const handleJqueryElem = (target, elem)=>{\n    target.textContent = \"\";\n    if (0 in elem) {\n        for(let i = 0; (i in elem); i++){\n            target.appendChild(elem[i].cloneNode(true));\n        }\n    } else {\n        target.appendChild(elem.cloneNode(true));\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderActions = (instance, params)=>{\n    const actions = getActions();\n    const loader = getLoader();\n    if (!actions || !loader) {\n        return;\n    }\n    // Actions (buttons) wrapper\n    if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {\n        hide(actions);\n    } else {\n        show(actions);\n    }\n    // Custom class\n    applyCustomClass(actions, params, \"actions\");\n    // Render all the buttons\n    renderButtons(actions, loader, params);\n    // Loader\n    setInnerHtml(loader, params.loaderHtml || \"\");\n    applyCustomClass(loader, params, \"loader\");\n};\n/**\n * @param {HTMLElement} actions\n * @param {HTMLElement} loader\n * @param {SweetAlertOptions} params\n */ function renderButtons(actions, loader, params) {\n    const confirmButton = getConfirmButton();\n    const denyButton = getDenyButton();\n    const cancelButton = getCancelButton();\n    if (!confirmButton || !denyButton || !cancelButton) {\n        return;\n    }\n    // Render buttons\n    renderButton(confirmButton, \"confirm\", params);\n    renderButton(denyButton, \"deny\", params);\n    renderButton(cancelButton, \"cancel\", params);\n    handleButtonsStyling(confirmButton, denyButton, cancelButton, params);\n    if (params.reverseButtons) {\n        if (params.toast) {\n            actions.insertBefore(cancelButton, confirmButton);\n            actions.insertBefore(denyButton, confirmButton);\n        } else {\n            actions.insertBefore(cancelButton, loader);\n            actions.insertBefore(denyButton, loader);\n            actions.insertBefore(confirmButton, loader);\n        }\n    }\n}\n/**\n * @param {HTMLElement} confirmButton\n * @param {HTMLElement} denyButton\n * @param {HTMLElement} cancelButton\n * @param {SweetAlertOptions} params\n */ function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {\n    if (!params.buttonsStyling) {\n        removeClass([\n            confirmButton,\n            denyButton,\n            cancelButton\n        ], swalClasses.styled);\n        return;\n    }\n    addClass([\n        confirmButton,\n        denyButton,\n        cancelButton\n    ], swalClasses.styled);\n    // Buttons background colors\n    if (params.confirmButtonColor) {\n        confirmButton.style.backgroundColor = params.confirmButtonColor;\n        addClass(confirmButton, swalClasses[\"default-outline\"]);\n    }\n    if (params.denyButtonColor) {\n        denyButton.style.backgroundColor = params.denyButtonColor;\n        addClass(denyButton, swalClasses[\"default-outline\"]);\n    }\n    if (params.cancelButtonColor) {\n        cancelButton.style.backgroundColor = params.cancelButtonColor;\n        addClass(cancelButton, swalClasses[\"default-outline\"]);\n    }\n}\n/**\n * @param {HTMLElement} button\n * @param {'confirm' | 'deny' | 'cancel'} buttonType\n * @param {SweetAlertOptions} params\n */ function renderButton(button, buttonType, params) {\n    const buttonName = /** @type {'Confirm' | 'Deny' | 'Cancel'} */ capitalizeFirstLetter(buttonType);\n    toggle(button, params[`show${buttonName}Button`], \"inline-block\");\n    setInnerHtml(button, params[`${buttonType}ButtonText`] || \"\"); // Set caption text\n    button.setAttribute(\"aria-label\", params[`${buttonType}ButtonAriaLabel`] || \"\"); // ARIA label\n    // Add buttons custom classes\n    button.className = swalClasses[buttonType];\n    applyCustomClass(button, params, `${buttonType}Button`);\n}\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderCloseButton = (instance, params)=>{\n    const closeButton = getCloseButton();\n    if (!closeButton) {\n        return;\n    }\n    setInnerHtml(closeButton, params.closeButtonHtml || \"\");\n    // Custom class\n    applyCustomClass(closeButton, params, \"closeButton\");\n    toggle(closeButton, params.showCloseButton);\n    closeButton.setAttribute(\"aria-label\", params.closeButtonAriaLabel || \"\");\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderContainer = (instance, params)=>{\n    const container = getContainer();\n    if (!container) {\n        return;\n    }\n    handleBackdropParam(container, params.backdrop);\n    handlePositionParam(container, params.position);\n    handleGrowParam(container, params.grow);\n    // Custom class\n    applyCustomClass(container, params, \"container\");\n};\n/**\n * @param {HTMLElement} container\n * @param {SweetAlertOptions['backdrop']} backdrop\n */ function handleBackdropParam(container, backdrop) {\n    if (typeof backdrop === \"string\") {\n        container.style.background = backdrop;\n    } else if (!backdrop) {\n        addClass([\n            document.documentElement,\n            document.body\n        ], swalClasses[\"no-backdrop\"]);\n    }\n}\n/**\n * @param {HTMLElement} container\n * @param {SweetAlertOptions['position']} position\n */ function handlePositionParam(container, position) {\n    if (!position) {\n        return;\n    }\n    if (position in swalClasses) {\n        addClass(container, swalClasses[position]);\n    } else {\n        warn('The \"position\" parameter is not valid, defaulting to \"center\"');\n        addClass(container, swalClasses.center);\n    }\n}\n/**\n * @param {HTMLElement} container\n * @param {SweetAlertOptions['grow']} grow\n */ function handleGrowParam(container, grow) {\n    if (!grow) {\n        return;\n    }\n    addClass(container, swalClasses[`grow-${grow}`]);\n}\n/**\n * This module contains `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n * This is the approach that Babel will probably take to implement private methods/fields\n *   https://github.com/tc39/proposal-private-methods\n *   https://github.com/babel/babel/pull/7555\n * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n *   then we can use that language feature.\n */ var privateProps = {\n    innerParams: new WeakMap(),\n    domCache: new WeakMap()\n};\n/// <reference path=\"../../../../sweetalert2.d.ts\"/>\n/** @type {InputClass[]} */ const inputClasses = [\n    \"input\",\n    \"file\",\n    \"range\",\n    \"select\",\n    \"radio\",\n    \"checkbox\",\n    \"textarea\"\n];\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderInput = (instance, params)=>{\n    const popup = getPopup();\n    if (!popup) {\n        return;\n    }\n    const innerParams = privateProps.innerParams.get(instance);\n    const rerender = !innerParams || params.input !== innerParams.input;\n    inputClasses.forEach((inputClass)=>{\n        const inputContainer = getDirectChildByClass(popup, swalClasses[inputClass]);\n        if (!inputContainer) {\n            return;\n        }\n        // set attributes\n        setAttributes(inputClass, params.inputAttributes);\n        // set class\n        inputContainer.className = swalClasses[inputClass];\n        if (rerender) {\n            hide(inputContainer);\n        }\n    });\n    if (params.input) {\n        if (rerender) {\n            showInput(params);\n        }\n        // set custom class\n        setCustomClass(params);\n    }\n};\n/**\n * @param {SweetAlertOptions} params\n */ const showInput = (params)=>{\n    if (!params.input) {\n        return;\n    }\n    if (!renderInputType[params.input]) {\n        error(`Unexpected type of input! Expected ${Object.keys(renderInputType).join(\" | \")}, got \"${params.input}\"`);\n        return;\n    }\n    const inputContainer = getInputContainer(params.input);\n    if (!inputContainer) {\n        return;\n    }\n    const input = renderInputType[params.input](inputContainer, params);\n    show(inputContainer);\n    // input autofocus\n    if (params.inputAutoFocus) {\n        setTimeout(()=>{\n            focusInput(input);\n        });\n    }\n};\n/**\n * @param {HTMLInputElement} input\n */ const removeAttributes = (input)=>{\n    for(let i = 0; i < input.attributes.length; i++){\n        const attrName = input.attributes[i].name;\n        if (![\n            \"id\",\n            \"type\",\n            \"value\",\n            \"style\"\n        ].includes(attrName)) {\n            input.removeAttribute(attrName);\n        }\n    }\n};\n/**\n * @param {InputClass} inputClass\n * @param {SweetAlertOptions['inputAttributes']} inputAttributes\n */ const setAttributes = (inputClass, inputAttributes)=>{\n    const popup = getPopup();\n    if (!popup) {\n        return;\n    }\n    const input = getInput$1(popup, inputClass);\n    if (!input) {\n        return;\n    }\n    removeAttributes(input);\n    for(const attr in inputAttributes){\n        input.setAttribute(attr, inputAttributes[attr]);\n    }\n};\n/**\n * @param {SweetAlertOptions} params\n */ const setCustomClass = (params)=>{\n    if (!params.input) {\n        return;\n    }\n    const inputContainer = getInputContainer(params.input);\n    if (inputContainer) {\n        applyCustomClass(inputContainer, params, \"input\");\n    }\n};\n/**\n * @param {HTMLInputElement | HTMLTextAreaElement} input\n * @param {SweetAlertOptions} params\n */ const setInputPlaceholder = (input, params)=>{\n    if (!input.placeholder && params.inputPlaceholder) {\n        input.placeholder = params.inputPlaceholder;\n    }\n};\n/**\n * @param {Input} input\n * @param {Input} prependTo\n * @param {SweetAlertOptions} params\n */ const setInputLabel = (input, prependTo, params)=>{\n    if (params.inputLabel) {\n        const label = document.createElement(\"label\");\n        const labelClass = swalClasses[\"input-label\"];\n        label.setAttribute(\"for\", input.id);\n        label.className = labelClass;\n        if (typeof params.customClass === \"object\") {\n            addClass(label, params.customClass.inputLabel);\n        }\n        label.innerText = params.inputLabel;\n        prependTo.insertAdjacentElement(\"beforebegin\", label);\n    }\n};\n/**\n * @param {SweetAlertInput} inputType\n * @returns {HTMLElement | undefined}\n */ const getInputContainer = (inputType)=>{\n    const popup = getPopup();\n    if (!popup) {\n        return;\n    }\n    return getDirectChildByClass(popup, swalClasses[/** @type {SwalClass} */ inputType] || swalClasses.input);\n};\n/**\n * @param {HTMLInputElement | HTMLOutputElement | HTMLTextAreaElement} input\n * @param {SweetAlertOptions['inputValue']} inputValue\n */ const checkAndSetInputValue = (input, inputValue)=>{\n    if ([\n        \"string\",\n        \"number\"\n    ].includes(typeof inputValue)) {\n        input.value = `${inputValue}`;\n    } else if (!isPromise(inputValue)) {\n        warn(`Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"${typeof inputValue}\"`);\n    }\n};\n/** @type {Record<SweetAlertInput, (input: Input | HTMLElement, params: SweetAlertOptions) => Input>} */ const renderInputType = {};\n/**\n * @param {HTMLInputElement} input\n * @param {SweetAlertOptions} params\n * @returns {HTMLInputElement}\n */ renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = renderInputType.search = renderInputType.date = renderInputType[\"datetime-local\"] = renderInputType.time = renderInputType.week = renderInputType.month = /** @type {(input: Input | HTMLElement, params: SweetAlertOptions) => Input} */ (input, params)=>{\n    checkAndSetInputValue(input, params.inputValue);\n    setInputLabel(input, input, params);\n    setInputPlaceholder(input, params);\n    input.type = params.input;\n    return input;\n};\n/**\n * @param {HTMLInputElement} input\n * @param {SweetAlertOptions} params\n * @returns {HTMLInputElement}\n */ renderInputType.file = (input, params)=>{\n    setInputLabel(input, input, params);\n    setInputPlaceholder(input, params);\n    return input;\n};\n/**\n * @param {HTMLInputElement} range\n * @param {SweetAlertOptions} params\n * @returns {HTMLInputElement}\n */ renderInputType.range = (range, params)=>{\n    const rangeInput = range.querySelector(\"input\");\n    const rangeOutput = range.querySelector(\"output\");\n    checkAndSetInputValue(rangeInput, params.inputValue);\n    rangeInput.type = params.input;\n    checkAndSetInputValue(rangeOutput, params.inputValue);\n    setInputLabel(rangeInput, range, params);\n    return range;\n};\n/**\n * @param {HTMLSelectElement} select\n * @param {SweetAlertOptions} params\n * @returns {HTMLSelectElement}\n */ renderInputType.select = (select, params)=>{\n    select.textContent = \"\";\n    if (params.inputPlaceholder) {\n        const placeholder = document.createElement(\"option\");\n        setInnerHtml(placeholder, params.inputPlaceholder);\n        placeholder.value = \"\";\n        placeholder.disabled = true;\n        placeholder.selected = true;\n        select.appendChild(placeholder);\n    }\n    setInputLabel(select, select, params);\n    return select;\n};\n/**\n * @param {HTMLInputElement} radio\n * @returns {HTMLInputElement}\n */ renderInputType.radio = (radio)=>{\n    radio.textContent = \"\";\n    return radio;\n};\n/**\n * @param {HTMLLabelElement} checkboxContainer\n * @param {SweetAlertOptions} params\n * @returns {HTMLInputElement}\n */ renderInputType.checkbox = (checkboxContainer, params)=>{\n    const checkbox = getInput$1(getPopup(), \"checkbox\");\n    checkbox.value = \"1\";\n    checkbox.checked = Boolean(params.inputValue);\n    const label = checkboxContainer.querySelector(\"span\");\n    setInnerHtml(label, params.inputPlaceholder || params.inputLabel);\n    return checkbox;\n};\n/**\n * @param {HTMLTextAreaElement} textarea\n * @param {SweetAlertOptions} params\n * @returns {HTMLTextAreaElement}\n */ renderInputType.textarea = (textarea, params)=>{\n    checkAndSetInputValue(textarea, params.inputValue);\n    setInputPlaceholder(textarea, params);\n    setInputLabel(textarea, textarea, params);\n    /**\n   * @param {HTMLElement} el\n   * @returns {number}\n   */ const getMargin = (el)=>parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);\n    // https://github.com/sweetalert2/sweetalert2/issues/2291\n    setTimeout(()=>{\n        // https://github.com/sweetalert2/sweetalert2/issues/1699\n        if (\"MutationObserver\" in window) {\n            const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);\n            const textareaResizeHandler = ()=>{\n                // check if texarea is still in document (i.e. popup wasn't closed in the meantime)\n                if (!document.body.contains(textarea)) {\n                    return;\n                }\n                const textareaWidth = textarea.offsetWidth + getMargin(textarea);\n                if (textareaWidth > initialPopupWidth) {\n                    getPopup().style.width = `${textareaWidth}px`;\n                } else {\n                    applyNumericalStyle(getPopup(), \"width\", params.width);\n                }\n            };\n            new MutationObserver(textareaResizeHandler).observe(textarea, {\n                attributes: true,\n                attributeFilter: [\n                    \"style\"\n                ]\n            });\n        }\n    });\n    return textarea;\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderContent = (instance, params)=>{\n    const htmlContainer = getHtmlContainer();\n    if (!htmlContainer) {\n        return;\n    }\n    showWhenInnerHtmlPresent(htmlContainer);\n    applyCustomClass(htmlContainer, params, \"htmlContainer\");\n    // Content as HTML\n    if (params.html) {\n        parseHtmlToContainer(params.html, htmlContainer);\n        show(htmlContainer, \"block\");\n    } else if (params.text) {\n        htmlContainer.textContent = params.text;\n        show(htmlContainer, \"block\");\n    } else {\n        hide(htmlContainer);\n    }\n    renderInput(instance, params);\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderFooter = (instance, params)=>{\n    const footer = getFooter();\n    if (!footer) {\n        return;\n    }\n    showWhenInnerHtmlPresent(footer);\n    toggle(footer, params.footer, \"block\");\n    if (params.footer) {\n        parseHtmlToContainer(params.footer, footer);\n    }\n    // Custom class\n    applyCustomClass(footer, params, \"footer\");\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderIcon = (instance, params)=>{\n    const innerParams = privateProps.innerParams.get(instance);\n    const icon = getIcon();\n    if (!icon) {\n        return;\n    }\n    // if the given icon already rendered, apply the styling without re-rendering the icon\n    if (innerParams && params.icon === innerParams.icon) {\n        // Custom or default content\n        setContent(icon, params);\n        applyStyles(icon, params);\n        return;\n    }\n    if (!params.icon && !params.iconHtml) {\n        hide(icon);\n        return;\n    }\n    if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {\n        error(`Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"${params.icon}\"`);\n        hide(icon);\n        return;\n    }\n    show(icon);\n    // Custom or default content\n    setContent(icon, params);\n    applyStyles(icon, params);\n    // Animate icon\n    addClass(icon, params.showClass && params.showClass.icon);\n    // Re-adjust the success icon on system theme change\n    const colorSchemeQueryList = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    colorSchemeQueryList.addEventListener(\"change\", adjustSuccessIconBackgroundColor);\n};\n/**\n * @param {HTMLElement} icon\n * @param {SweetAlertOptions} params\n */ const applyStyles = (icon, params)=>{\n    for (const [iconType, iconClassName] of Object.entries(iconTypes)){\n        if (params.icon !== iconType) {\n            removeClass(icon, iconClassName);\n        }\n    }\n    addClass(icon, params.icon && iconTypes[params.icon]);\n    // Icon color\n    setColor(icon, params);\n    // Success icon background color\n    adjustSuccessIconBackgroundColor();\n    // Custom class\n    applyCustomClass(icon, params, \"icon\");\n};\n// Adjust success icon background color to match the popup background color\nconst adjustSuccessIconBackgroundColor = ()=>{\n    const popup = getPopup();\n    if (!popup) {\n        return;\n    }\n    const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue(\"background-color\");\n    /** @type {NodeListOf<HTMLElement>} */ const successIconParts = popup.querySelectorAll(\"[class^=swal2-success-circular-line], .swal2-success-fix\");\n    for(let i = 0; i < successIconParts.length; i++){\n        successIconParts[i].style.backgroundColor = popupBackgroundColor;\n    }\n};\nconst successIconHtml = `\n  <div class=\"swal2-success-circular-line-left\"></div>\n  <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n  <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n  <div class=\"swal2-success-circular-line-right\"></div>\n`;\nconst errorIconHtml = `\n  <span class=\"swal2-x-mark\">\n    <span class=\"swal2-x-mark-line-left\"></span>\n    <span class=\"swal2-x-mark-line-right\"></span>\n  </span>\n`;\n/**\n * @param {HTMLElement} icon\n * @param {SweetAlertOptions} params\n */ const setContent = (icon, params)=>{\n    if (!params.icon && !params.iconHtml) {\n        return;\n    }\n    let oldContent = icon.innerHTML;\n    let newContent = \"\";\n    if (params.iconHtml) {\n        newContent = iconContent(params.iconHtml);\n    } else if (params.icon === \"success\") {\n        newContent = successIconHtml;\n        oldContent = oldContent.replace(/ style=\".*?\"/g, \"\"); // undo adjustSuccessIconBackgroundColor()\n    } else if (params.icon === \"error\") {\n        newContent = errorIconHtml;\n    } else if (params.icon) {\n        const defaultIconHtml = {\n            question: \"?\",\n            warning: \"!\",\n            info: \"i\"\n        };\n        newContent = iconContent(defaultIconHtml[params.icon]);\n    }\n    if (oldContent.trim() !== newContent.trim()) {\n        setInnerHtml(icon, newContent);\n    }\n};\n/**\n * @param {HTMLElement} icon\n * @param {SweetAlertOptions} params\n */ const setColor = (icon, params)=>{\n    if (!params.iconColor) {\n        return;\n    }\n    icon.style.color = params.iconColor;\n    icon.style.borderColor = params.iconColor;\n    for (const sel of [\n        \".swal2-success-line-tip\",\n        \".swal2-success-line-long\",\n        \".swal2-x-mark-line-left\",\n        \".swal2-x-mark-line-right\"\n    ]){\n        setStyle(icon, sel, \"background-color\", params.iconColor);\n    }\n    setStyle(icon, \".swal2-success-ring\", \"border-color\", params.iconColor);\n};\n/**\n * @param {string} content\n * @returns {string}\n */ const iconContent = (content)=>`<div class=\"${swalClasses[\"icon-content\"]}\">${content}</div>`;\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderImage = (instance, params)=>{\n    const image = getImage();\n    if (!image) {\n        return;\n    }\n    if (!params.imageUrl) {\n        hide(image);\n        return;\n    }\n    show(image, \"\");\n    // Src, alt\n    image.setAttribute(\"src\", params.imageUrl);\n    image.setAttribute(\"alt\", params.imageAlt || \"\");\n    // Width, height\n    applyNumericalStyle(image, \"width\", params.imageWidth);\n    applyNumericalStyle(image, \"height\", params.imageHeight);\n    // Class\n    image.className = swalClasses.image;\n    applyCustomClass(image, params, \"image\");\n};\nlet dragging = false;\nlet mousedownX = 0;\nlet mousedownY = 0;\nlet initialX = 0;\nlet initialY = 0;\n/**\n * @param {HTMLElement} popup\n */ const addDraggableListeners = (popup)=>{\n    popup.addEventListener(\"mousedown\", down);\n    document.body.addEventListener(\"mousemove\", move);\n    popup.addEventListener(\"mouseup\", up);\n    popup.addEventListener(\"touchstart\", down);\n    document.body.addEventListener(\"touchmove\", move);\n    popup.addEventListener(\"touchend\", up);\n};\n/**\n * @param {HTMLElement} popup\n */ const removeDraggableListeners = (popup)=>{\n    popup.removeEventListener(\"mousedown\", down);\n    document.body.removeEventListener(\"mousemove\", move);\n    popup.removeEventListener(\"mouseup\", up);\n    popup.removeEventListener(\"touchstart\", down);\n    document.body.removeEventListener(\"touchmove\", move);\n    popup.removeEventListener(\"touchend\", up);\n};\n/**\n * @param {MouseEvent | TouchEvent} event\n */ const down = (event)=>{\n    const popup = getPopup();\n    if (event.target === popup || getIcon().contains(/** @type {HTMLElement} */ event.target)) {\n        dragging = true;\n        const clientXY = getClientXY(event);\n        mousedownX = clientXY.clientX;\n        mousedownY = clientXY.clientY;\n        initialX = parseInt(popup.style.insetInlineStart) || 0;\n        initialY = parseInt(popup.style.insetBlockStart) || 0;\n        addClass(popup, \"swal2-dragging\");\n    }\n};\n/**\n * @param {MouseEvent | TouchEvent} event\n */ const move = (event)=>{\n    const popup = getPopup();\n    if (dragging) {\n        let { clientX, clientY } = getClientXY(event);\n        popup.style.insetInlineStart = `${initialX + (clientX - mousedownX)}px`;\n        popup.style.insetBlockStart = `${initialY + (clientY - mousedownY)}px`;\n    }\n};\nconst up = ()=>{\n    const popup = getPopup();\n    dragging = false;\n    removeClass(popup, \"swal2-dragging\");\n};\n/**\n * @param {MouseEvent | TouchEvent} event\n * @returns {{ clientX: number, clientY: number }}\n */ const getClientXY = (event)=>{\n    let clientX = 0, clientY = 0;\n    if (event.type.startsWith(\"mouse\")) {\n        clientX = /** @type {MouseEvent} */ event.clientX;\n        clientY = /** @type {MouseEvent} */ event.clientY;\n    } else if (event.type.startsWith(\"touch\")) {\n        clientX = /** @type {TouchEvent} */ event.touches[0].clientX;\n        clientY = /** @type {TouchEvent} */ event.touches[0].clientY;\n    }\n    return {\n        clientX,\n        clientY\n    };\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderPopup = (instance, params)=>{\n    const container = getContainer();\n    const popup = getPopup();\n    if (!container || !popup) {\n        return;\n    }\n    // Width\n    // https://github.com/sweetalert2/sweetalert2/issues/2170\n    if (params.toast) {\n        applyNumericalStyle(container, \"width\", params.width);\n        popup.style.width = \"100%\";\n        const loader = getLoader();\n        if (loader) {\n            popup.insertBefore(loader, getIcon());\n        }\n    } else {\n        applyNumericalStyle(popup, \"width\", params.width);\n    }\n    // Padding\n    applyNumericalStyle(popup, \"padding\", params.padding);\n    // Color\n    if (params.color) {\n        popup.style.color = params.color;\n    }\n    // Background\n    if (params.background) {\n        popup.style.background = params.background;\n    }\n    hide(getValidationMessage());\n    // Classes\n    addClasses$1(popup, params);\n    if (params.draggable && !params.toast) {\n        addClass(popup, swalClasses.draggable);\n        addDraggableListeners(popup);\n    } else {\n        removeClass(popup, swalClasses.draggable);\n        removeDraggableListeners(popup);\n    }\n};\n/**\n * @param {HTMLElement} popup\n * @param {SweetAlertOptions} params\n */ const addClasses$1 = (popup, params)=>{\n    const showClass = params.showClass || {};\n    // Default Class + showClass when updating Swal.update({})\n    popup.className = `${swalClasses.popup} ${isVisible$1(popup) ? showClass.popup : \"\"}`;\n    if (params.toast) {\n        addClass([\n            document.documentElement,\n            document.body\n        ], swalClasses[\"toast-shown\"]);\n        addClass(popup, swalClasses.toast);\n    } else {\n        addClass(popup, swalClasses.modal);\n    }\n    // Custom class\n    applyCustomClass(popup, params, \"popup\");\n    // TODO: remove in the next major\n    if (typeof params.customClass === \"string\") {\n        addClass(popup, params.customClass);\n    }\n    // Icon class (#1842)\n    if (params.icon) {\n        addClass(popup, swalClasses[`icon-${params.icon}`]);\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderProgressSteps = (instance, params)=>{\n    const progressStepsContainer = getProgressSteps();\n    if (!progressStepsContainer) {\n        return;\n    }\n    const { progressSteps, currentProgressStep } = params;\n    if (!progressSteps || progressSteps.length === 0 || currentProgressStep === undefined) {\n        hide(progressStepsContainer);\n        return;\n    }\n    show(progressStepsContainer);\n    progressStepsContainer.textContent = \"\";\n    if (currentProgressStep >= progressSteps.length) {\n        warn(\"Invalid currentProgressStep parameter, it should be less than progressSteps.length \" + \"(currentProgressStep like JS arrays starts from 0)\");\n    }\n    progressSteps.forEach((step, index)=>{\n        const stepEl = createStepElement(step);\n        progressStepsContainer.appendChild(stepEl);\n        if (index === currentProgressStep) {\n            addClass(stepEl, swalClasses[\"active-progress-step\"]);\n        }\n        if (index !== progressSteps.length - 1) {\n            const lineEl = createLineElement(params);\n            progressStepsContainer.appendChild(lineEl);\n        }\n    });\n};\n/**\n * @param {string} step\n * @returns {HTMLLIElement}\n */ const createStepElement = (step)=>{\n    const stepEl = document.createElement(\"li\");\n    addClass(stepEl, swalClasses[\"progress-step\"]);\n    setInnerHtml(stepEl, step);\n    return stepEl;\n};\n/**\n * @param {SweetAlertOptions} params\n * @returns {HTMLLIElement}\n */ const createLineElement = (params)=>{\n    const lineEl = document.createElement(\"li\");\n    addClass(lineEl, swalClasses[\"progress-step-line\"]);\n    if (params.progressStepsDistance) {\n        applyNumericalStyle(lineEl, \"width\", params.progressStepsDistance);\n    }\n    return lineEl;\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const renderTitle = (instance, params)=>{\n    const title = getTitle();\n    if (!title) {\n        return;\n    }\n    showWhenInnerHtmlPresent(title);\n    toggle(title, params.title || params.titleText, \"block\");\n    if (params.title) {\n        parseHtmlToContainer(params.title, title);\n    }\n    if (params.titleText) {\n        title.innerText = params.titleText;\n    }\n    // Custom class\n    applyCustomClass(title, params, \"title\");\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const render = (instance, params)=>{\n    renderPopup(instance, params);\n    renderContainer(instance, params);\n    renderProgressSteps(instance, params);\n    renderIcon(instance, params);\n    renderImage(instance, params);\n    renderTitle(instance, params);\n    renderCloseButton(instance, params);\n    renderContent(instance, params);\n    renderActions(instance, params);\n    renderFooter(instance, params);\n    const popup = getPopup();\n    if (typeof params.didRender === \"function\" && popup) {\n        params.didRender(popup);\n    }\n    globalState.eventEmitter.emit(\"didRender\", popup);\n};\n/*\n * Global function to determine if SweetAlert2 popup is shown\n */ const isVisible = ()=>{\n    return isVisible$1(getPopup());\n};\n/*\n * Global function to click 'Confirm' button\n */ const clickConfirm = ()=>{\n    var _dom$getConfirmButton;\n    return (_dom$getConfirmButton = getConfirmButton()) === null || _dom$getConfirmButton === void 0 ? void 0 : _dom$getConfirmButton.click();\n};\n/*\n * Global function to click 'Deny' button\n */ const clickDeny = ()=>{\n    var _dom$getDenyButton;\n    return (_dom$getDenyButton = getDenyButton()) === null || _dom$getDenyButton === void 0 ? void 0 : _dom$getDenyButton.click();\n};\n/*\n * Global function to click 'Cancel' button\n */ const clickCancel = ()=>{\n    var _dom$getCancelButton;\n    return (_dom$getCancelButton = getCancelButton()) === null || _dom$getCancelButton === void 0 ? void 0 : _dom$getCancelButton.click();\n};\n/** @typedef {'cancel' | 'backdrop' | 'close' | 'esc' | 'timer'} DismissReason */ /** @type {Record<DismissReason, DismissReason>} */ const DismissReason = Object.freeze({\n    cancel: \"cancel\",\n    backdrop: \"backdrop\",\n    close: \"close\",\n    esc: \"esc\",\n    timer: \"timer\"\n});\n/**\n * @param {GlobalState} globalState\n */ const removeKeydownHandler = (globalState)=>{\n    if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n        globalState.keydownTarget.removeEventListener(\"keydown\", globalState.keydownHandler, {\n            capture: globalState.keydownListenerCapture\n        });\n        globalState.keydownHandlerAdded = false;\n    }\n};\n/**\n * @param {GlobalState} globalState\n * @param {SweetAlertOptions} innerParams\n * @param {*} dismissWith\n */ const addKeydownHandler = (globalState, innerParams, dismissWith)=>{\n    removeKeydownHandler(globalState);\n    if (!innerParams.toast) {\n        globalState.keydownHandler = (e)=>keydownHandler(innerParams, e, dismissWith);\n        globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();\n        globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\n        globalState.keydownTarget.addEventListener(\"keydown\", globalState.keydownHandler, {\n            capture: globalState.keydownListenerCapture\n        });\n        globalState.keydownHandlerAdded = true;\n    }\n};\n/**\n * @param {number} index\n * @param {number} increment\n */ const setFocus = (index, increment)=>{\n    var _dom$getPopup;\n    const focusableElements = getFocusableElements();\n    // search for visible elements and select the next possible match\n    if (focusableElements.length) {\n        index = index + increment;\n        // rollover to first item\n        if (index === focusableElements.length) {\n            index = 0;\n        // go to last item\n        } else if (index === -1) {\n            index = focusableElements.length - 1;\n        }\n        focusableElements[index].focus();\n        return;\n    }\n    // no visible focusable elements, focus the popup\n    (_dom$getPopup = getPopup()) === null || _dom$getPopup === void 0 || _dom$getPopup.focus();\n};\nconst arrowKeysNextButton = [\n    \"ArrowRight\",\n    \"ArrowDown\"\n];\nconst arrowKeysPreviousButton = [\n    \"ArrowLeft\",\n    \"ArrowUp\"\n];\n/**\n * @param {SweetAlertOptions} innerParams\n * @param {KeyboardEvent} event\n * @param {Function} dismissWith\n */ const keydownHandler = (innerParams, event, dismissWith)=>{\n    if (!innerParams) {\n        return; // This instance has already been destroyed\n    }\n    // Ignore keydown during IME composition\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event#ignoring_keydown_during_ime_composition\n    // https://github.com/sweetalert2/sweetalert2/issues/720\n    // https://github.com/sweetalert2/sweetalert2/issues/2406\n    if (event.isComposing || event.keyCode === 229) {\n        return;\n    }\n    if (innerParams.stopKeydownPropagation) {\n        event.stopPropagation();\n    }\n    // ENTER\n    if (event.key === \"Enter\") {\n        handleEnter(event, innerParams);\n    } else if (event.key === \"Tab\") {\n        handleTab(event);\n    } else if ([\n        ...arrowKeysNextButton,\n        ...arrowKeysPreviousButton\n    ].includes(event.key)) {\n        handleArrows(event.key);\n    } else if (event.key === \"Escape\") {\n        handleEsc(event, innerParams, dismissWith);\n    }\n};\n/**\n * @param {KeyboardEvent} event\n * @param {SweetAlertOptions} innerParams\n */ const handleEnter = (event, innerParams)=>{\n    // https://github.com/sweetalert2/sweetalert2/issues/2386\n    if (!callIfFunction(innerParams.allowEnterKey)) {\n        return;\n    }\n    const input = getInput$1(getPopup(), innerParams.input);\n    if (event.target && input && event.target instanceof HTMLElement && event.target.outerHTML === input.outerHTML) {\n        if ([\n            \"textarea\",\n            \"file\"\n        ].includes(innerParams.input)) {\n            return; // do not submit\n        }\n        clickConfirm();\n        event.preventDefault();\n    }\n};\n/**\n * @param {KeyboardEvent} event\n */ const handleTab = (event)=>{\n    const targetElement = event.target;\n    const focusableElements = getFocusableElements();\n    let btnIndex = -1;\n    for(let i = 0; i < focusableElements.length; i++){\n        if (targetElement === focusableElements[i]) {\n            btnIndex = i;\n            break;\n        }\n    }\n    // Cycle to the next button\n    if (!event.shiftKey) {\n        setFocus(btnIndex, 1);\n    } else {\n        setFocus(btnIndex, -1);\n    }\n    event.stopPropagation();\n    event.preventDefault();\n};\n/**\n * @param {string} key\n */ const handleArrows = (key)=>{\n    const actions = getActions();\n    const confirmButton = getConfirmButton();\n    const denyButton = getDenyButton();\n    const cancelButton = getCancelButton();\n    if (!actions || !confirmButton || !denyButton || !cancelButton) {\n        return;\n    }\n    /** @type HTMLElement[] */ const buttons = [\n        confirmButton,\n        denyButton,\n        cancelButton\n    ];\n    if (document.activeElement instanceof HTMLElement && !buttons.includes(document.activeElement)) {\n        return;\n    }\n    const sibling = arrowKeysNextButton.includes(key) ? \"nextElementSibling\" : \"previousElementSibling\";\n    let buttonToFocus = document.activeElement;\n    if (!buttonToFocus) {\n        return;\n    }\n    for(let i = 0; i < actions.children.length; i++){\n        buttonToFocus = buttonToFocus[sibling];\n        if (!buttonToFocus) {\n            return;\n        }\n        if (buttonToFocus instanceof HTMLButtonElement && isVisible$1(buttonToFocus)) {\n            break;\n        }\n    }\n    if (buttonToFocus instanceof HTMLButtonElement) {\n        buttonToFocus.focus();\n    }\n};\n/**\n * @param {KeyboardEvent} event\n * @param {SweetAlertOptions} innerParams\n * @param {Function} dismissWith\n */ const handleEsc = (event, innerParams, dismissWith)=>{\n    if (callIfFunction(innerParams.allowEscapeKey)) {\n        event.preventDefault();\n        dismissWith(DismissReason.esc);\n    }\n};\n/**\n * This module contains `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n * This is the approach that Babel will probably take to implement private methods/fields\n *   https://github.com/tc39/proposal-private-methods\n *   https://github.com/babel/babel/pull/7555\n * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n *   then we can use that language feature.\n */ var privateMethods = {\n    swalPromiseResolve: new WeakMap(),\n    swalPromiseReject: new WeakMap()\n};\n// From https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n// Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\n// elements not within the active modal dialog will not be surfaced if a user opens a screen\n// reader’s list of elements (headings, form controls, landmarks, etc.) in the document.\nconst setAriaHidden = ()=>{\n    const container = getContainer();\n    const bodyChildren = Array.from(document.body.children);\n    bodyChildren.forEach((el)=>{\n        if (el.contains(container)) {\n            return;\n        }\n        if (el.hasAttribute(\"aria-hidden\")) {\n            el.setAttribute(\"data-previous-aria-hidden\", el.getAttribute(\"aria-hidden\") || \"\");\n        }\n        el.setAttribute(\"aria-hidden\", \"true\");\n    });\n};\nconst unsetAriaHidden = ()=>{\n    const bodyChildren = Array.from(document.body.children);\n    bodyChildren.forEach((el)=>{\n        if (el.hasAttribute(\"data-previous-aria-hidden\")) {\n            el.setAttribute(\"aria-hidden\", el.getAttribute(\"data-previous-aria-hidden\") || \"\");\n            el.removeAttribute(\"data-previous-aria-hidden\");\n        } else {\n            el.removeAttribute(\"aria-hidden\");\n        }\n    });\n};\n// @ts-ignore\nconst isSafariOrIOS =  false && 0; // true for Safari desktop + all iOS browsers https://stackoverflow.com/a/70585394\n/**\n * Fix iOS scrolling\n * http://stackoverflow.com/q/39626302\n */ const iOSfix = ()=>{\n    if (isSafariOrIOS && !hasClass(document.body, swalClasses.iosfix)) {\n        const offset = document.body.scrollTop;\n        document.body.style.top = `${offset * -1}px`;\n        addClass(document.body, swalClasses.iosfix);\n        lockBodyScroll();\n    }\n};\n/**\n * https://github.com/sweetalert2/sweetalert2/issues/1246\n */ const lockBodyScroll = ()=>{\n    const container = getContainer();\n    if (!container) {\n        return;\n    }\n    /** @type {boolean} */ let preventTouchMove;\n    /**\n   * @param {TouchEvent} event\n   */ container.ontouchstart = (event)=>{\n        preventTouchMove = shouldPreventTouchMove(event);\n    };\n    /**\n   * @param {TouchEvent} event\n   */ container.ontouchmove = (event)=>{\n        if (preventTouchMove) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n};\n/**\n * @param {TouchEvent} event\n * @returns {boolean}\n */ const shouldPreventTouchMove = (event)=>{\n    const target = event.target;\n    const container = getContainer();\n    const htmlContainer = getHtmlContainer();\n    if (!container || !htmlContainer) {\n        return false;\n    }\n    if (isStylus(event) || isZoom(event)) {\n        return false;\n    }\n    if (target === container) {\n        return true;\n    }\n    if (!isScrollable(container) && target instanceof HTMLElement && target.tagName !== \"INPUT\" && // #1603\n    target.tagName !== \"TEXTAREA\" && // #2266\n    !(isScrollable(htmlContainer) && // #1944\n    htmlContainer.contains(target))) {\n        return true;\n    }\n    return false;\n};\n/**\n * https://github.com/sweetalert2/sweetalert2/issues/1786\n *\n * @param {*} event\n * @returns {boolean}\n */ const isStylus = (event)=>{\n    return event.touches && event.touches.length && event.touches[0].touchType === \"stylus\";\n};\n/**\n * https://github.com/sweetalert2/sweetalert2/issues/1891\n *\n * @param {TouchEvent} event\n * @returns {boolean}\n */ const isZoom = (event)=>{\n    return event.touches && event.touches.length > 1;\n};\nconst undoIOSfix = ()=>{\n    if (hasClass(document.body, swalClasses.iosfix)) {\n        const offset = parseInt(document.body.style.top, 10);\n        removeClass(document.body, swalClasses.iosfix);\n        document.body.style.top = \"\";\n        document.body.scrollTop = offset * -1;\n    }\n};\n/**\n * Measure scrollbar width for padding body during modal show/hide\n * https://github.com/twbs/bootstrap/blob/master/js/src/modal.js\n *\n * @returns {number}\n */ const measureScrollbar = ()=>{\n    const scrollDiv = document.createElement(\"div\");\n    scrollDiv.className = swalClasses[\"scrollbar-measure\"];\n    document.body.appendChild(scrollDiv);\n    const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n};\n/**\n * Remember state in cases where opening and handling a modal will fiddle with it.\n * @type {number | null}\n */ let previousBodyPadding = null;\n/**\n * @param {string} initialBodyOverflow\n */ const replaceScrollbarWithPadding = (initialBodyOverflow)=>{\n    // for queues, do not do this more than once\n    if (previousBodyPadding !== null) {\n        return;\n    }\n    // if the body has overflow\n    if (document.body.scrollHeight > window.innerHeight || initialBodyOverflow === \"scroll\" // https://github.com/sweetalert2/sweetalert2/issues/2663\n    ) {\n        // add padding so the content doesn't shift after removal of scrollbar\n        previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue(\"padding-right\"));\n        document.body.style.paddingRight = `${previousBodyPadding + measureScrollbar()}px`;\n    }\n};\nconst undoReplaceScrollbarWithPadding = ()=>{\n    if (previousBodyPadding !== null) {\n        document.body.style.paddingRight = `${previousBodyPadding}px`;\n        previousBodyPadding = null;\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {HTMLElement} container\n * @param {boolean} returnFocus\n * @param {Function} didClose\n */ function removePopupAndResetState(instance, container, returnFocus, didClose) {\n    if (isToast()) {\n        triggerDidCloseAndDispose(instance, didClose);\n    } else {\n        restoreActiveElement(returnFocus).then(()=>triggerDidCloseAndDispose(instance, didClose));\n        removeKeydownHandler(globalState);\n    }\n    // workaround for https://github.com/sweetalert2/sweetalert2/issues/2088\n    // for some reason removing the container in Safari will scroll the document to bottom\n    if (isSafariOrIOS) {\n        container.setAttribute(\"style\", \"display:none !important\");\n        container.removeAttribute(\"class\");\n        container.innerHTML = \"\";\n    } else {\n        container.remove();\n    }\n    if (isModal()) {\n        undoReplaceScrollbarWithPadding();\n        undoIOSfix();\n        unsetAriaHidden();\n    }\n    removeBodyClasses();\n}\n/**\n * Remove SweetAlert2 classes from body\n */ function removeBodyClasses() {\n    removeClass([\n        document.documentElement,\n        document.body\n    ], [\n        swalClasses.shown,\n        swalClasses[\"height-auto\"],\n        swalClasses[\"no-backdrop\"],\n        swalClasses[\"toast-shown\"]\n    ]);\n}\n/**\n * Instance method to close sweetAlert\n *\n * @param {any} resolveValue\n */ function close(resolveValue) {\n    resolveValue = prepareResolveValue(resolveValue);\n    const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);\n    const didClose = triggerClosePopup(this);\n    if (this.isAwaitingPromise) {\n        // A swal awaiting for a promise (after a click on Confirm or Deny) cannot be dismissed anymore #2335\n        if (!resolveValue.isDismissed) {\n            handleAwaitingPromise(this);\n            swalPromiseResolve(resolveValue);\n        }\n    } else if (didClose) {\n        // Resolve Swal promise\n        swalPromiseResolve(resolveValue);\n    }\n}\nconst triggerClosePopup = (instance)=>{\n    const popup = getPopup();\n    if (!popup) {\n        return false;\n    }\n    const innerParams = privateProps.innerParams.get(instance);\n    if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {\n        return false;\n    }\n    removeClass(popup, innerParams.showClass.popup);\n    addClass(popup, innerParams.hideClass.popup);\n    const backdrop = getContainer();\n    removeClass(backdrop, innerParams.showClass.backdrop);\n    addClass(backdrop, innerParams.hideClass.backdrop);\n    handlePopupAnimation(instance, popup, innerParams);\n    return true;\n};\n/**\n * @param {any} error\n */ function rejectPromise(error) {\n    const rejectPromise = privateMethods.swalPromiseReject.get(this);\n    handleAwaitingPromise(this);\n    if (rejectPromise) {\n        // Reject Swal promise\n        rejectPromise(error);\n    }\n}\n/**\n * @param {SweetAlert} instance\n */ const handleAwaitingPromise = (instance)=>{\n    if (instance.isAwaitingPromise) {\n        delete instance.isAwaitingPromise;\n        // The instance might have been previously partly destroyed, we must resume the destroy process in this case #2335\n        if (!privateProps.innerParams.get(instance)) {\n            instance._destroy();\n        }\n    }\n};\n/**\n * @param {any} resolveValue\n * @returns {SweetAlertResult}\n */ const prepareResolveValue = (resolveValue)=>{\n    // When user calls Swal.close()\n    if (typeof resolveValue === \"undefined\") {\n        return {\n            isConfirmed: false,\n            isDenied: false,\n            isDismissed: true\n        };\n    }\n    return Object.assign({\n        isConfirmed: false,\n        isDenied: false,\n        isDismissed: false\n    }, resolveValue);\n};\n/**\n * @param {SweetAlert} instance\n * @param {HTMLElement} popup\n * @param {SweetAlertOptions} innerParams\n */ const handlePopupAnimation = (instance, popup, innerParams)=>{\n    var _globalState$eventEmi;\n    const container = getContainer();\n    // If animation is supported, animate\n    const animationIsSupported = hasCssAnimation(popup);\n    if (typeof innerParams.willClose === \"function\") {\n        innerParams.willClose(popup);\n    }\n    (_globalState$eventEmi = globalState.eventEmitter) === null || _globalState$eventEmi === void 0 || _globalState$eventEmi.emit(\"willClose\", popup);\n    if (animationIsSupported) {\n        animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);\n    } else {\n        // Otherwise, remove immediately\n        removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {HTMLElement} popup\n * @param {HTMLElement} container\n * @param {boolean} returnFocus\n * @param {Function} didClose\n */ const animatePopup = (instance, popup, container, returnFocus, didClose)=>{\n    globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);\n    /**\n   * @param {AnimationEvent | TransitionEvent} e\n   */ const swalCloseAnimationFinished = function(e) {\n        if (e.target === popup) {\n            var _globalState$swalClos;\n            (_globalState$swalClos = globalState.swalCloseEventFinishedCallback) === null || _globalState$swalClos === void 0 || _globalState$swalClos.call(globalState);\n            delete globalState.swalCloseEventFinishedCallback;\n            popup.removeEventListener(\"animationend\", swalCloseAnimationFinished);\n            popup.removeEventListener(\"transitionend\", swalCloseAnimationFinished);\n        }\n    };\n    popup.addEventListener(\"animationend\", swalCloseAnimationFinished);\n    popup.addEventListener(\"transitionend\", swalCloseAnimationFinished);\n};\n/**\n * @param {SweetAlert} instance\n * @param {Function} didClose\n */ const triggerDidCloseAndDispose = (instance, didClose)=>{\n    setTimeout(()=>{\n        var _globalState$eventEmi2;\n        if (typeof didClose === \"function\") {\n            didClose.bind(instance.params)();\n        }\n        (_globalState$eventEmi2 = globalState.eventEmitter) === null || _globalState$eventEmi2 === void 0 || _globalState$eventEmi2.emit(\"didClose\");\n        // instance might have been destroyed already\n        if (instance._destroy) {\n            instance._destroy();\n        }\n    });\n};\n/**\n * Shows loader (spinner), this is useful with AJAX requests.\n * By default the loader be shown instead of the \"Confirm\" button.\n *\n * @param {HTMLButtonElement | null} [buttonToReplace]\n */ const showLoading = (buttonToReplace)=>{\n    let popup = getPopup();\n    if (!popup) {\n        new Swal();\n    }\n    popup = getPopup();\n    if (!popup) {\n        return;\n    }\n    const loader = getLoader();\n    if (isToast()) {\n        hide(getIcon());\n    } else {\n        replaceButton(popup, buttonToReplace);\n    }\n    show(loader);\n    popup.setAttribute(\"data-loading\", \"true\");\n    popup.setAttribute(\"aria-busy\", \"true\");\n    popup.focus();\n};\n/**\n * @param {HTMLElement} popup\n * @param {HTMLButtonElement | null} [buttonToReplace]\n */ const replaceButton = (popup, buttonToReplace)=>{\n    const actions = getActions();\n    const loader = getLoader();\n    if (!actions || !loader) {\n        return;\n    }\n    if (!buttonToReplace && isVisible$1(getConfirmButton())) {\n        buttonToReplace = getConfirmButton();\n    }\n    show(actions);\n    if (buttonToReplace) {\n        hide(buttonToReplace);\n        loader.setAttribute(\"data-button-to-replace\", buttonToReplace.className);\n        actions.insertBefore(loader, buttonToReplace);\n    }\n    addClass([\n        popup,\n        actions\n    ], swalClasses.loading);\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const handleInputOptionsAndValue = (instance, params)=>{\n    if (params.input === \"select\" || params.input === \"radio\") {\n        handleInputOptions(instance, params);\n    } else if ([\n        \"text\",\n        \"email\",\n        \"number\",\n        \"tel\",\n        \"textarea\"\n    ].some((i)=>i === params.input) && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {\n        showLoading(getConfirmButton());\n        handleInputValue(instance, params);\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} innerParams\n * @returns {SweetAlertInputValue}\n */ const getInputValue = (instance, innerParams)=>{\n    const input = instance.getInput();\n    if (!input) {\n        return null;\n    }\n    switch(innerParams.input){\n        case \"checkbox\":\n            return getCheckboxValue(input);\n        case \"radio\":\n            return getRadioValue(input);\n        case \"file\":\n            return getFileValue(input);\n        default:\n            return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n    }\n};\n/**\n * @param {HTMLInputElement} input\n * @returns {number}\n */ const getCheckboxValue = (input)=>input.checked ? 1 : 0;\n/**\n * @param {HTMLInputElement} input\n * @returns {string | null}\n */ const getRadioValue = (input)=>input.checked ? input.value : null;\n/**\n * @param {HTMLInputElement} input\n * @returns {FileList | File | null}\n */ const getFileValue = (input)=>input.files && input.files.length ? input.getAttribute(\"multiple\") !== null ? input.files : input.files[0] : null;\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const handleInputOptions = (instance, params)=>{\n    const popup = getPopup();\n    if (!popup) {\n        return;\n    }\n    /**\n   * @param {Record<string, any>} inputOptions\n   */ const processInputOptions = (inputOptions)=>{\n        if (params.input === \"select\") {\n            populateSelectOptions(popup, formatInputOptions(inputOptions), params);\n        } else if (params.input === \"radio\") {\n            populateRadioOptions(popup, formatInputOptions(inputOptions), params);\n        }\n    };\n    if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {\n        showLoading(getConfirmButton());\n        asPromise(params.inputOptions).then((inputOptions)=>{\n            instance.hideLoading();\n            processInputOptions(inputOptions);\n        });\n    } else if (typeof params.inputOptions === \"object\") {\n        processInputOptions(params.inputOptions);\n    } else {\n        error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`);\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertOptions} params\n */ const handleInputValue = (instance, params)=>{\n    const input = instance.getInput();\n    if (!input) {\n        return;\n    }\n    hide(input);\n    asPromise(params.inputValue).then((inputValue)=>{\n        input.value = params.input === \"number\" ? `${parseFloat(inputValue) || 0}` : `${inputValue}`;\n        show(input);\n        input.focus();\n        instance.hideLoading();\n    }).catch((err)=>{\n        error(`Error in inputValue promise: ${err}`);\n        input.value = \"\";\n        show(input);\n        input.focus();\n        instance.hideLoading();\n    });\n};\n/**\n * @param {HTMLElement} popup\n * @param {InputOptionFlattened[]} inputOptions\n * @param {SweetAlertOptions} params\n */ function populateSelectOptions(popup, inputOptions, params) {\n    const select = getDirectChildByClass(popup, swalClasses.select);\n    if (!select) {\n        return;\n    }\n    /**\n   * @param {HTMLElement} parent\n   * @param {string} optionLabel\n   * @param {string} optionValue\n   */ const renderOption = (parent, optionLabel, optionValue)=>{\n        const option = document.createElement(\"option\");\n        option.value = optionValue;\n        setInnerHtml(option, optionLabel);\n        option.selected = isSelected(optionValue, params.inputValue);\n        parent.appendChild(option);\n    };\n    inputOptions.forEach((inputOption)=>{\n        const optionValue = inputOption[0];\n        const optionLabel = inputOption[1];\n        // <optgroup> spec:\n        // https://www.w3.org/TR/html401/interact/forms.html#h-17.6\n        // \"...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)...\"\n        // check whether this is a <optgroup>\n        if (Array.isArray(optionLabel)) {\n            // if it is an array, then it is an <optgroup>\n            const optgroup = document.createElement(\"optgroup\");\n            optgroup.label = optionValue;\n            optgroup.disabled = false; // not configurable for now\n            select.appendChild(optgroup);\n            optionLabel.forEach((o)=>renderOption(optgroup, o[1], o[0]));\n        } else {\n            // case of <option>\n            renderOption(select, optionLabel, optionValue);\n        }\n    });\n    select.focus();\n}\n/**\n * @param {HTMLElement} popup\n * @param {InputOptionFlattened[]} inputOptions\n * @param {SweetAlertOptions} params\n */ function populateRadioOptions(popup, inputOptions, params) {\n    const radio = getDirectChildByClass(popup, swalClasses.radio);\n    if (!radio) {\n        return;\n    }\n    inputOptions.forEach((inputOption)=>{\n        const radioValue = inputOption[0];\n        const radioLabel = inputOption[1];\n        const radioInput = document.createElement(\"input\");\n        const radioLabelElement = document.createElement(\"label\");\n        radioInput.type = \"radio\";\n        radioInput.name = swalClasses.radio;\n        radioInput.value = radioValue;\n        if (isSelected(radioValue, params.inputValue)) {\n            radioInput.checked = true;\n        }\n        const label = document.createElement(\"span\");\n        setInnerHtml(label, radioLabel);\n        label.className = swalClasses.label;\n        radioLabelElement.appendChild(radioInput);\n        radioLabelElement.appendChild(label);\n        radio.appendChild(radioLabelElement);\n    });\n    const radios = radio.querySelectorAll(\"input\");\n    if (radios.length) {\n        radios[0].focus();\n    }\n}\n/**\n * Converts `inputOptions` into an array of `[value, label]`s\n *\n * @param {Record<string, any>} inputOptions\n * @typedef {string[]} InputOptionFlattened\n * @returns {InputOptionFlattened[]}\n */ const formatInputOptions = (inputOptions)=>{\n    /** @type {InputOptionFlattened[]} */ const result = [];\n    if (inputOptions instanceof Map) {\n        inputOptions.forEach((value, key)=>{\n            let valueFormatted = value;\n            if (typeof valueFormatted === \"object\") {\n                // case of <optgroup>\n                valueFormatted = formatInputOptions(valueFormatted);\n            }\n            result.push([\n                key,\n                valueFormatted\n            ]);\n        });\n    } else {\n        Object.keys(inputOptions).forEach((key)=>{\n            let valueFormatted = inputOptions[key];\n            if (typeof valueFormatted === \"object\") {\n                // case of <optgroup>\n                valueFormatted = formatInputOptions(valueFormatted);\n            }\n            result.push([\n                key,\n                valueFormatted\n            ]);\n        });\n    }\n    return result;\n};\n/**\n * @param {string} optionValue\n * @param {SweetAlertInputValue} inputValue\n * @returns {boolean}\n */ const isSelected = (optionValue, inputValue)=>{\n    return !!inputValue && inputValue.toString() === optionValue.toString();\n};\n/**\n * @param {SweetAlert} instance\n */ const handleConfirmButtonClick = (instance)=>{\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableButtons();\n    if (innerParams.input) {\n        handleConfirmOrDenyWithInput(instance, \"confirm\");\n    } else {\n        confirm(instance, true);\n    }\n};\n/**\n * @param {SweetAlert} instance\n */ const handleDenyButtonClick = (instance)=>{\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableButtons();\n    if (innerParams.returnInputValueOnDeny) {\n        handleConfirmOrDenyWithInput(instance, \"deny\");\n    } else {\n        deny(instance, false);\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {Function} dismissWith\n */ const handleCancelButtonClick = (instance, dismissWith)=>{\n    instance.disableButtons();\n    dismissWith(DismissReason.cancel);\n};\n/**\n * @param {SweetAlert} instance\n * @param {'confirm' | 'deny'} type\n */ const handleConfirmOrDenyWithInput = (instance, type)=>{\n    const innerParams = privateProps.innerParams.get(instance);\n    if (!innerParams.input) {\n        error(`The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`);\n        return;\n    }\n    const input = instance.getInput();\n    const inputValue = getInputValue(instance, innerParams);\n    if (innerParams.inputValidator) {\n        handleInputValidator(instance, inputValue, type);\n    } else if (input && !input.checkValidity()) {\n        instance.enableButtons();\n        instance.showValidationMessage(innerParams.validationMessage || input.validationMessage);\n    } else if (type === \"deny\") {\n        deny(instance, inputValue);\n    } else {\n        confirm(instance, inputValue);\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {SweetAlertInputValue} inputValue\n * @param {'confirm' | 'deny'} type\n */ const handleInputValidator = (instance, inputValue, type)=>{\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableInput();\n    const validationPromise = Promise.resolve().then(()=>asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));\n    validationPromise.then((validationMessage)=>{\n        instance.enableButtons();\n        instance.enableInput();\n        if (validationMessage) {\n            instance.showValidationMessage(validationMessage);\n        } else if (type === \"deny\") {\n            deny(instance, inputValue);\n        } else {\n            confirm(instance, inputValue);\n        }\n    });\n};\n/**\n * @param {SweetAlert} instance\n * @param {any} value\n */ const deny = (instance, value)=>{\n    const innerParams = privateProps.innerParams.get(instance || undefined);\n    if (innerParams.showLoaderOnDeny) {\n        showLoading(getDenyButton());\n    }\n    if (innerParams.preDeny) {\n        instance.isAwaitingPromise = true; // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n        const preDenyPromise = Promise.resolve().then(()=>asPromise(innerParams.preDeny(value, innerParams.validationMessage)));\n        preDenyPromise.then((preDenyValue)=>{\n            if (preDenyValue === false) {\n                instance.hideLoading();\n                handleAwaitingPromise(instance);\n            } else {\n                instance.close({\n                    isDenied: true,\n                    value: typeof preDenyValue === \"undefined\" ? value : preDenyValue\n                });\n            }\n        }).catch((error)=>rejectWith(instance || undefined, error));\n    } else {\n        instance.close({\n            isDenied: true,\n            value\n        });\n    }\n};\n/**\n * @param {SweetAlert} instance\n * @param {any} value\n */ const succeedWith = (instance, value)=>{\n    instance.close({\n        isConfirmed: true,\n        value\n    });\n};\n/**\n *\n * @param {SweetAlert} instance\n * @param {string} error\n */ const rejectWith = (instance, error)=>{\n    instance.rejectPromise(error);\n};\n/**\n *\n * @param {SweetAlert} instance\n * @param {any} value\n */ const confirm = (instance, value)=>{\n    const innerParams = privateProps.innerParams.get(instance || undefined);\n    if (innerParams.showLoaderOnConfirm) {\n        showLoading();\n    }\n    if (innerParams.preConfirm) {\n        instance.resetValidationMessage();\n        instance.isAwaitingPromise = true; // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n        const preConfirmPromise = Promise.resolve().then(()=>asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));\n        preConfirmPromise.then((preConfirmValue)=>{\n            if (isVisible$1(getValidationMessage()) || preConfirmValue === false) {\n                instance.hideLoading();\n                handleAwaitingPromise(instance);\n            } else {\n                succeedWith(instance, typeof preConfirmValue === \"undefined\" ? value : preConfirmValue);\n            }\n        }).catch((error)=>rejectWith(instance || undefined, error));\n    } else {\n        succeedWith(instance, value);\n    }\n};\n/**\n * Hides loader and shows back the button which was hidden by .showLoading()\n */ function hideLoading() {\n    // do nothing if popup is closed\n    const innerParams = privateProps.innerParams.get(this);\n    if (!innerParams) {\n        return;\n    }\n    const domCache = privateProps.domCache.get(this);\n    hide(domCache.loader);\n    if (isToast()) {\n        if (innerParams.icon) {\n            show(getIcon());\n        }\n    } else {\n        showRelatedButton(domCache);\n    }\n    removeClass([\n        domCache.popup,\n        domCache.actions\n    ], swalClasses.loading);\n    domCache.popup.removeAttribute(\"aria-busy\");\n    domCache.popup.removeAttribute(\"data-loading\");\n    domCache.confirmButton.disabled = false;\n    domCache.denyButton.disabled = false;\n    domCache.cancelButton.disabled = false;\n}\nconst showRelatedButton = (domCache)=>{\n    const buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute(\"data-button-to-replace\"));\n    if (buttonToReplace.length) {\n        show(buttonToReplace[0], \"inline-block\");\n    } else if (allButtonsAreHidden()) {\n        hide(domCache.actions);\n    }\n};\n/**\n * Gets the input DOM node, this method works with input parameter.\n *\n * @returns {HTMLInputElement | null}\n */ function getInput() {\n    const innerParams = privateProps.innerParams.get(this);\n    const domCache = privateProps.domCache.get(this);\n    if (!domCache) {\n        return null;\n    }\n    return getInput$1(domCache.popup, innerParams.input);\n}\n/**\n * @param {SweetAlert} instance\n * @param {string[]} buttons\n * @param {boolean} disabled\n */ function setButtonsDisabled(instance, buttons, disabled) {\n    const domCache = privateProps.domCache.get(instance);\n    buttons.forEach((button)=>{\n        domCache[button].disabled = disabled;\n    });\n}\n/**\n * @param {HTMLInputElement | null} input\n * @param {boolean} disabled\n */ function setInputDisabled(input, disabled) {\n    const popup = getPopup();\n    if (!popup || !input) {\n        return;\n    }\n    if (input.type === \"radio\") {\n        /** @type {NodeListOf<HTMLInputElement>} */ const radios = popup.querySelectorAll(`[name=\"${swalClasses.radio}\"]`);\n        for(let i = 0; i < radios.length; i++){\n            radios[i].disabled = disabled;\n        }\n    } else {\n        input.disabled = disabled;\n    }\n}\n/**\n * Enable all the buttons\n * @this {SweetAlert}\n */ function enableButtons() {\n    setButtonsDisabled(this, [\n        \"confirmButton\",\n        \"denyButton\",\n        \"cancelButton\"\n    ], false);\n}\n/**\n * Disable all the buttons\n * @this {SweetAlert}\n */ function disableButtons() {\n    setButtonsDisabled(this, [\n        \"confirmButton\",\n        \"denyButton\",\n        \"cancelButton\"\n    ], true);\n}\n/**\n * Enable the input field\n * @this {SweetAlert}\n */ function enableInput() {\n    setInputDisabled(this.getInput(), false);\n}\n/**\n * Disable the input field\n * @this {SweetAlert}\n */ function disableInput() {\n    setInputDisabled(this.getInput(), true);\n}\n/**\n * Show block with validation message\n *\n * @param {string} error\n * @this {SweetAlert}\n */ function showValidationMessage(error) {\n    const domCache = privateProps.domCache.get(this);\n    const params = privateProps.innerParams.get(this);\n    setInnerHtml(domCache.validationMessage, error);\n    domCache.validationMessage.className = swalClasses[\"validation-message\"];\n    if (params.customClass && params.customClass.validationMessage) {\n        addClass(domCache.validationMessage, params.customClass.validationMessage);\n    }\n    show(domCache.validationMessage);\n    const input = this.getInput();\n    if (input) {\n        input.setAttribute(\"aria-invalid\", \"true\");\n        input.setAttribute(\"aria-describedby\", swalClasses[\"validation-message\"]);\n        focusInput(input);\n        addClass(input, swalClasses.inputerror);\n    }\n}\n/**\n * Hide block with validation message\n *\n * @this {SweetAlert}\n */ function resetValidationMessage() {\n    const domCache = privateProps.domCache.get(this);\n    if (domCache.validationMessage) {\n        hide(domCache.validationMessage);\n    }\n    const input = this.getInput();\n    if (input) {\n        input.removeAttribute(\"aria-invalid\");\n        input.removeAttribute(\"aria-describedby\");\n        removeClass(input, swalClasses.inputerror);\n    }\n}\nconst defaultParams = {\n    title: \"\",\n    titleText: \"\",\n    text: \"\",\n    html: \"\",\n    footer: \"\",\n    icon: undefined,\n    iconColor: undefined,\n    iconHtml: undefined,\n    template: undefined,\n    toast: false,\n    draggable: false,\n    animation: true,\n    theme: \"light\",\n    showClass: {\n        popup: \"swal2-show\",\n        backdrop: \"swal2-backdrop-show\",\n        icon: \"swal2-icon-show\"\n    },\n    hideClass: {\n        popup: \"swal2-hide\",\n        backdrop: \"swal2-backdrop-hide\",\n        icon: \"swal2-icon-hide\"\n    },\n    customClass: {},\n    target: \"body\",\n    color: undefined,\n    backdrop: true,\n    heightAuto: true,\n    allowOutsideClick: true,\n    allowEscapeKey: true,\n    allowEnterKey: true,\n    stopKeydownPropagation: true,\n    keydownListenerCapture: false,\n    showConfirmButton: true,\n    showDenyButton: false,\n    showCancelButton: false,\n    preConfirm: undefined,\n    preDeny: undefined,\n    confirmButtonText: \"OK\",\n    confirmButtonAriaLabel: \"\",\n    confirmButtonColor: undefined,\n    denyButtonText: \"No\",\n    denyButtonAriaLabel: \"\",\n    denyButtonColor: undefined,\n    cancelButtonText: \"Cancel\",\n    cancelButtonAriaLabel: \"\",\n    cancelButtonColor: undefined,\n    buttonsStyling: true,\n    reverseButtons: false,\n    focusConfirm: true,\n    focusDeny: false,\n    focusCancel: false,\n    returnFocus: true,\n    showCloseButton: false,\n    closeButtonHtml: \"&times;\",\n    closeButtonAriaLabel: \"Close this dialog\",\n    loaderHtml: \"\",\n    showLoaderOnConfirm: false,\n    showLoaderOnDeny: false,\n    imageUrl: undefined,\n    imageWidth: undefined,\n    imageHeight: undefined,\n    imageAlt: \"\",\n    timer: undefined,\n    timerProgressBar: false,\n    width: undefined,\n    padding: undefined,\n    background: undefined,\n    input: undefined,\n    inputPlaceholder: \"\",\n    inputLabel: \"\",\n    inputValue: \"\",\n    inputOptions: {},\n    inputAutoFocus: true,\n    inputAutoTrim: true,\n    inputAttributes: {},\n    inputValidator: undefined,\n    returnInputValueOnDeny: false,\n    validationMessage: undefined,\n    grow: false,\n    position: \"center\",\n    progressSteps: [],\n    currentProgressStep: undefined,\n    progressStepsDistance: undefined,\n    willOpen: undefined,\n    didOpen: undefined,\n    didRender: undefined,\n    willClose: undefined,\n    didClose: undefined,\n    didDestroy: undefined,\n    scrollbarPadding: true\n};\nconst updatableParams = [\n    \"allowEscapeKey\",\n    \"allowOutsideClick\",\n    \"background\",\n    \"buttonsStyling\",\n    \"cancelButtonAriaLabel\",\n    \"cancelButtonColor\",\n    \"cancelButtonText\",\n    \"closeButtonAriaLabel\",\n    \"closeButtonHtml\",\n    \"color\",\n    \"confirmButtonAriaLabel\",\n    \"confirmButtonColor\",\n    \"confirmButtonText\",\n    \"currentProgressStep\",\n    \"customClass\",\n    \"denyButtonAriaLabel\",\n    \"denyButtonColor\",\n    \"denyButtonText\",\n    \"didClose\",\n    \"didDestroy\",\n    \"draggable\",\n    \"footer\",\n    \"hideClass\",\n    \"html\",\n    \"icon\",\n    \"iconColor\",\n    \"iconHtml\",\n    \"imageAlt\",\n    \"imageHeight\",\n    \"imageUrl\",\n    \"imageWidth\",\n    \"preConfirm\",\n    \"preDeny\",\n    \"progressSteps\",\n    \"returnFocus\",\n    \"reverseButtons\",\n    \"showCancelButton\",\n    \"showCloseButton\",\n    \"showConfirmButton\",\n    \"showDenyButton\",\n    \"text\",\n    \"title\",\n    \"titleText\",\n    \"theme\",\n    \"willClose\"\n];\n/** @type {Record<string, string | undefined>} */ const deprecatedParams = {\n    allowEnterKey: undefined\n};\nconst toastIncompatibleParams = [\n    \"allowOutsideClick\",\n    \"allowEnterKey\",\n    \"backdrop\",\n    \"draggable\",\n    \"focusConfirm\",\n    \"focusDeny\",\n    \"focusCancel\",\n    \"returnFocus\",\n    \"heightAuto\",\n    \"keydownListenerCapture\"\n];\n/**\n * Is valid parameter\n *\n * @param {string} paramName\n * @returns {boolean}\n */ const isValidParameter = (paramName)=>{\n    return Object.prototype.hasOwnProperty.call(defaultParams, paramName);\n};\n/**\n * Is valid parameter for Swal.update() method\n *\n * @param {string} paramName\n * @returns {boolean}\n */ const isUpdatableParameter = (paramName)=>{\n    return updatableParams.indexOf(paramName) !== -1;\n};\n/**\n * Is deprecated parameter\n *\n * @param {string} paramName\n * @returns {string | undefined}\n */ const isDeprecatedParameter = (paramName)=>{\n    return deprecatedParams[paramName];\n};\n/**\n * @param {string} param\n */ const checkIfParamIsValid = (param)=>{\n    if (!isValidParameter(param)) {\n        warn(`Unknown parameter \"${param}\"`);\n    }\n};\n/**\n * @param {string} param\n */ const checkIfToastParamIsValid = (param)=>{\n    if (toastIncompatibleParams.includes(param)) {\n        warn(`The parameter \"${param}\" is incompatible with toasts`);\n    }\n};\n/**\n * @param {string} param\n */ const checkIfParamIsDeprecated = (param)=>{\n    const isDeprecated = isDeprecatedParameter(param);\n    if (isDeprecated) {\n        warnAboutDeprecation(param, isDeprecated);\n    }\n};\n/**\n * Show relevant warnings for given params\n *\n * @param {SweetAlertOptions} params\n */ const showWarningsForParams = (params)=>{\n    if (params.backdrop === false && params.allowOutsideClick) {\n        warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\n    }\n    if (params.theme && ![\n        \"light\",\n        \"dark\",\n        \"auto\",\n        \"borderless\"\n    ].includes(params.theme)) {\n        warn(`Invalid theme \"${params.theme}\". Expected \"light\", \"dark\", \"auto\", or \"borderless\"`);\n    }\n    for(const param in params){\n        checkIfParamIsValid(param);\n        if (params.toast) {\n            checkIfToastParamIsValid(param);\n        }\n        checkIfParamIsDeprecated(param);\n    }\n};\n/**\n * Updates popup parameters.\n *\n * @param {SweetAlertOptions} params\n */ function update(params) {\n    const container = getContainer();\n    const popup = getPopup();\n    const innerParams = privateProps.innerParams.get(this);\n    if (!popup || hasClass(popup, innerParams.hideClass.popup)) {\n        warn(`You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`);\n        return;\n    }\n    const validUpdatableParams = filterValidParams(params);\n    const updatedParams = Object.assign({}, innerParams, validUpdatableParams);\n    showWarningsForParams(updatedParams);\n    container.dataset[\"swal2Theme\"] = updatedParams.theme;\n    render(this, updatedParams);\n    privateProps.innerParams.set(this, updatedParams);\n    Object.defineProperties(this, {\n        params: {\n            value: Object.assign({}, this.params, params),\n            writable: false,\n            enumerable: true\n        }\n    });\n}\n/**\n * @param {SweetAlertOptions} params\n * @returns {SweetAlertOptions}\n */ const filterValidParams = (params)=>{\n    const validUpdatableParams = {};\n    Object.keys(params).forEach((param)=>{\n        if (isUpdatableParameter(param)) {\n            validUpdatableParams[param] = params[param];\n        } else {\n            warn(`Invalid parameter to update: ${param}`);\n        }\n    });\n    return validUpdatableParams;\n};\n/**\n * Dispose the current SweetAlert2 instance\n */ function _destroy() {\n    const domCache = privateProps.domCache.get(this);\n    const innerParams = privateProps.innerParams.get(this);\n    if (!innerParams) {\n        disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n        return; // This instance has already been destroyed\n    }\n    // Check if there is another Swal closing\n    if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n        globalState.swalCloseEventFinishedCallback();\n        delete globalState.swalCloseEventFinishedCallback;\n    }\n    if (typeof innerParams.didDestroy === \"function\") {\n        innerParams.didDestroy();\n    }\n    globalState.eventEmitter.emit(\"didDestroy\");\n    disposeSwal(this);\n}\n/**\n * @param {SweetAlert} instance\n */ const disposeSwal = (instance)=>{\n    disposeWeakMaps(instance);\n    // Unset this.params so GC will dispose it (#1569)\n    delete instance.params;\n    // Unset globalState props so GC will dispose globalState (#1569)\n    delete globalState.keydownHandler;\n    delete globalState.keydownTarget;\n    // Unset currentInstance\n    delete globalState.currentInstance;\n};\n/**\n * @param {SweetAlert} instance\n */ const disposeWeakMaps = (instance)=>{\n    // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n    if (instance.isAwaitingPromise) {\n        unsetWeakMaps(privateProps, instance);\n        instance.isAwaitingPromise = true;\n    } else {\n        unsetWeakMaps(privateMethods, instance);\n        unsetWeakMaps(privateProps, instance);\n        delete instance.isAwaitingPromise;\n        // Unset instance methods\n        delete instance.disableButtons;\n        delete instance.enableButtons;\n        delete instance.getInput;\n        delete instance.disableInput;\n        delete instance.enableInput;\n        delete instance.hideLoading;\n        delete instance.disableLoading;\n        delete instance.showValidationMessage;\n        delete instance.resetValidationMessage;\n        delete instance.close;\n        delete instance.closePopup;\n        delete instance.closeModal;\n        delete instance.closeToast;\n        delete instance.rejectPromise;\n        delete instance.update;\n        delete instance._destroy;\n    }\n};\n/**\n * @param {object} obj\n * @param {SweetAlert} instance\n */ const unsetWeakMaps = (obj, instance)=>{\n    for(const i in obj){\n        obj[i].delete(instance);\n    }\n};\nvar instanceMethods = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    _destroy: _destroy,\n    close: close,\n    closeModal: close,\n    closePopup: close,\n    closeToast: close,\n    disableButtons: disableButtons,\n    disableInput: disableInput,\n    disableLoading: hideLoading,\n    enableButtons: enableButtons,\n    enableInput: enableInput,\n    getInput: getInput,\n    handleAwaitingPromise: handleAwaitingPromise,\n    hideLoading: hideLoading,\n    rejectPromise: rejectPromise,\n    resetValidationMessage: resetValidationMessage,\n    showValidationMessage: showValidationMessage,\n    update: update\n});\n/**\n * @param {SweetAlertOptions} innerParams\n * @param {DomCache} domCache\n * @param {Function} dismissWith\n */ const handlePopupClick = (innerParams, domCache, dismissWith)=>{\n    if (innerParams.toast) {\n        handleToastClick(innerParams, domCache, dismissWith);\n    } else {\n        // Ignore click events that had mousedown on the popup but mouseup on the container\n        // This can happen when the user drags a slider\n        handleModalMousedown(domCache);\n        // Ignore click events that had mousedown on the container but mouseup on the popup\n        handleContainerMousedown(domCache);\n        handleModalClick(innerParams, domCache, dismissWith);\n    }\n};\n/**\n * @param {SweetAlertOptions} innerParams\n * @param {DomCache} domCache\n * @param {Function} dismissWith\n */ const handleToastClick = (innerParams, domCache, dismissWith)=>{\n    // Closing toast by internal click\n    domCache.popup.onclick = ()=>{\n        if (innerParams && (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)) {\n            return;\n        }\n        dismissWith(DismissReason.close);\n    };\n};\n/**\n * @param {SweetAlertOptions} innerParams\n * @returns {boolean}\n */ const isAnyButtonShown = (innerParams)=>{\n    return !!(innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton);\n};\nlet ignoreOutsideClick = false;\n/**\n * @param {DomCache} domCache\n */ const handleModalMousedown = (domCache)=>{\n    domCache.popup.onmousedown = ()=>{\n        domCache.container.onmouseup = function(e) {\n            domCache.container.onmouseup = ()=>{};\n            // We only check if the mouseup target is the container because usually it doesn't\n            // have any other direct children aside of the popup\n            if (e.target === domCache.container) {\n                ignoreOutsideClick = true;\n            }\n        };\n    };\n};\n/**\n * @param {DomCache} domCache\n */ const handleContainerMousedown = (domCache)=>{\n    domCache.container.onmousedown = (e)=>{\n        // prevent the modal text from being selected on double click on the container (allowOutsideClick: false)\n        if (e.target === domCache.container) {\n            e.preventDefault();\n        }\n        domCache.popup.onmouseup = function(e) {\n            domCache.popup.onmouseup = ()=>{};\n            // We also need to check if the mouseup target is a child of the popup\n            if (e.target === domCache.popup || e.target instanceof HTMLElement && domCache.popup.contains(e.target)) {\n                ignoreOutsideClick = true;\n            }\n        };\n    };\n};\n/**\n * @param {SweetAlertOptions} innerParams\n * @param {DomCache} domCache\n * @param {Function} dismissWith\n */ const handleModalClick = (innerParams, domCache, dismissWith)=>{\n    domCache.container.onclick = (e)=>{\n        if (ignoreOutsideClick) {\n            ignoreOutsideClick = false;\n            return;\n        }\n        if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {\n            dismissWith(DismissReason.backdrop);\n        }\n    };\n};\nconst isJqueryElement = (elem)=>typeof elem === \"object\" && elem.jquery;\nconst isElement = (elem)=>elem instanceof Element || isJqueryElement(elem);\nconst argsToParams = (args)=>{\n    const params = {};\n    if (typeof args[0] === \"object\" && !isElement(args[0])) {\n        Object.assign(params, args[0]);\n    } else {\n        [\n            \"title\",\n            \"html\",\n            \"icon\"\n        ].forEach((name, index)=>{\n            const arg = args[index];\n            if (typeof arg === \"string\" || isElement(arg)) {\n                params[name] = arg;\n            } else if (arg !== undefined) {\n                error(`Unexpected type of ${name}! Expected \"string\" or \"Element\", got ${typeof arg}`);\n            }\n        });\n    }\n    return params;\n};\n/**\n * Main method to create a new SweetAlert2 popup\n *\n * @param  {...SweetAlertOptions} args\n * @returns {Promise<SweetAlertResult>}\n */ function fire() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    return new this(...args);\n}\n/**\n * Returns an extended version of `Swal` containing `params` as defaults.\n * Useful for reusing Swal configuration.\n *\n * For example:\n *\n * Before:\n * const textPromptOptions = { input: 'text', showCancelButton: true }\n * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })\n * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })\n *\n * After:\n * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })\n * const {value: firstName} = await TextPrompt('What is your first name?')\n * const {value: lastName} = await TextPrompt('What is your last name?')\n *\n * @param {SweetAlertOptions} mixinParams\n * @returns {SweetAlert}\n */ function mixin(mixinParams) {\n    class MixinSwal extends this {\n        _main(params, priorityMixinParams) {\n            return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));\n        }\n    }\n    // @ts-ignore\n    return MixinSwal;\n}\n/**\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\n * Otherwise, returns undefined.\n *\n * @returns {number | undefined}\n */ const getTimerLeft = ()=>{\n    return globalState.timeout && globalState.timeout.getTimerLeft();\n};\n/**\n * Stop timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */ const stopTimer = ()=>{\n    if (globalState.timeout) {\n        stopTimerProgressBar();\n        return globalState.timeout.stop();\n    }\n};\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */ const resumeTimer = ()=>{\n    if (globalState.timeout) {\n        const remaining = globalState.timeout.start();\n        animateTimerProgressBar(remaining);\n        return remaining;\n    }\n};\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */ const toggleTimer = ()=>{\n    const timer = globalState.timeout;\n    return timer && (timer.running ? stopTimer() : resumeTimer());\n};\n/**\n * Increase timer. Returns number of milliseconds of an updated timer.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @param {number} ms\n * @returns {number | undefined}\n */ const increaseTimer = (ms)=>{\n    if (globalState.timeout) {\n        const remaining = globalState.timeout.increase(ms);\n        animateTimerProgressBar(remaining, true);\n        return remaining;\n    }\n};\n/**\n * Check if timer is running. Returns true if timer is running\n * or false if timer is paused or stopped.\n * If `timer` parameter isn't set, returns undefined\n *\n * @returns {boolean}\n */ const isTimerRunning = ()=>{\n    return !!(globalState.timeout && globalState.timeout.isRunning());\n};\nlet bodyClickListenerAdded = false;\nconst clickHandlers = {};\n/**\n * @param {string} attr\n */ function bindClickHandler() {\n    let attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"data-swal-template\";\n    clickHandlers[attr] = this;\n    if (!bodyClickListenerAdded) {\n        document.body.addEventListener(\"click\", bodyClickListener);\n        bodyClickListenerAdded = true;\n    }\n}\nconst bodyClickListener = (event)=>{\n    for(let el = event.target; el && el !== document; el = el.parentNode){\n        for(const attr in clickHandlers){\n            const template = el.getAttribute(attr);\n            if (template) {\n                clickHandlers[attr].fire({\n                    template\n                });\n                return;\n            }\n        }\n    }\n};\n// Source: https://gist.github.com/mudge/5830382?permalink_comment_id=2691957#gistcomment-2691957\nclass EventEmitter {\n    constructor(){\n        /** @type {Events} */ this.events = {};\n    }\n    /**\n   * @param {string} eventName\n   * @returns {EventHandlers}\n   */ _getHandlersByEventName(eventName) {\n        if (typeof this.events[eventName] === \"undefined\") {\n            // not Set because we need to keep the FIFO order\n            // https://github.com/sweetalert2/sweetalert2/pull/2763#discussion_r1748990334\n            this.events[eventName] = [];\n        }\n        return this.events[eventName];\n    }\n    /**\n   * @param {string} eventName\n   * @param {EventHandler} eventHandler\n   */ on(eventName, eventHandler) {\n        const currentHandlers = this._getHandlersByEventName(eventName);\n        if (!currentHandlers.includes(eventHandler)) {\n            currentHandlers.push(eventHandler);\n        }\n    }\n    /**\n   * @param {string} eventName\n   * @param {EventHandler} eventHandler\n   */ once(eventName, eventHandler) {\n        var _this = this;\n        /**\n     * @param {Array} args\n     */ const onceFn = function() {\n            _this.removeListener(eventName, onceFn);\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            eventHandler.apply(_this, args);\n        };\n        this.on(eventName, onceFn);\n    }\n    /**\n   * @param {string} eventName\n   * @param {Array} args\n   */ emit(eventName) {\n        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n            args[_key2 - 1] = arguments[_key2];\n        }\n        this._getHandlersByEventName(eventName).forEach(/**\n     * @param {EventHandler} eventHandler\n     */ (eventHandler)=>{\n            try {\n                eventHandler.apply(this, args);\n            } catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n   * @param {string} eventName\n   * @param {EventHandler} eventHandler\n   */ removeListener(eventName, eventHandler) {\n        const currentHandlers = this._getHandlersByEventName(eventName);\n        const index = currentHandlers.indexOf(eventHandler);\n        if (index > -1) {\n            currentHandlers.splice(index, 1);\n        }\n    }\n    /**\n   * @param {string} eventName\n   */ removeAllListeners(eventName) {\n        if (this.events[eventName] !== undefined) {\n            // https://github.com/sweetalert2/sweetalert2/pull/2763#discussion_r1749239222\n            this.events[eventName].length = 0;\n        }\n    }\n    reset() {\n        this.events = {};\n    }\n}\nglobalState.eventEmitter = new EventEmitter();\n/**\n * @param {string} eventName\n * @param {EventHandler} eventHandler\n */ const on = (eventName, eventHandler)=>{\n    globalState.eventEmitter.on(eventName, eventHandler);\n};\n/**\n * @param {string} eventName\n * @param {EventHandler} eventHandler\n */ const once = (eventName, eventHandler)=>{\n    globalState.eventEmitter.once(eventName, eventHandler);\n};\n/**\n * @param {string} [eventName]\n * @param {EventHandler} [eventHandler]\n */ const off = (eventName, eventHandler)=>{\n    // Remove all handlers for all events\n    if (!eventName) {\n        globalState.eventEmitter.reset();\n        return;\n    }\n    if (eventHandler) {\n        // Remove a specific handler\n        globalState.eventEmitter.removeListener(eventName, eventHandler);\n    } else {\n        // Remove all handlers for a specific event\n        globalState.eventEmitter.removeAllListeners(eventName);\n    }\n};\nvar staticMethods = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    argsToParams: argsToParams,\n    bindClickHandler: bindClickHandler,\n    clickCancel: clickCancel,\n    clickConfirm: clickConfirm,\n    clickDeny: clickDeny,\n    enableLoading: showLoading,\n    fire: fire,\n    getActions: getActions,\n    getCancelButton: getCancelButton,\n    getCloseButton: getCloseButton,\n    getConfirmButton: getConfirmButton,\n    getContainer: getContainer,\n    getDenyButton: getDenyButton,\n    getFocusableElements: getFocusableElements,\n    getFooter: getFooter,\n    getHtmlContainer: getHtmlContainer,\n    getIcon: getIcon,\n    getIconContent: getIconContent,\n    getImage: getImage,\n    getInputLabel: getInputLabel,\n    getLoader: getLoader,\n    getPopup: getPopup,\n    getProgressSteps: getProgressSteps,\n    getTimerLeft: getTimerLeft,\n    getTimerProgressBar: getTimerProgressBar,\n    getTitle: getTitle,\n    getValidationMessage: getValidationMessage,\n    increaseTimer: increaseTimer,\n    isDeprecatedParameter: isDeprecatedParameter,\n    isLoading: isLoading,\n    isTimerRunning: isTimerRunning,\n    isUpdatableParameter: isUpdatableParameter,\n    isValidParameter: isValidParameter,\n    isVisible: isVisible,\n    mixin: mixin,\n    off: off,\n    on: on,\n    once: once,\n    resumeTimer: resumeTimer,\n    showLoading: showLoading,\n    stopTimer: stopTimer,\n    toggleTimer: toggleTimer\n});\nclass Timer {\n    /**\n   * @param {Function} callback\n   * @param {number} delay\n   */ constructor(callback, delay){\n        this.callback = callback;\n        this.remaining = delay;\n        this.running = false;\n        this.start();\n    }\n    /**\n   * @returns {number}\n   */ start() {\n        if (!this.running) {\n            this.running = true;\n            this.started = new Date();\n            this.id = setTimeout(this.callback, this.remaining);\n        }\n        return this.remaining;\n    }\n    /**\n   * @returns {number}\n   */ stop() {\n        if (this.started && this.running) {\n            this.running = false;\n            clearTimeout(this.id);\n            this.remaining -= new Date().getTime() - this.started.getTime();\n        }\n        return this.remaining;\n    }\n    /**\n   * @param {number} n\n   * @returns {number}\n   */ increase(n) {\n        const running = this.running;\n        if (running) {\n            this.stop();\n        }\n        this.remaining += n;\n        if (running) {\n            this.start();\n        }\n        return this.remaining;\n    }\n    /**\n   * @returns {number}\n   */ getTimerLeft() {\n        if (this.running) {\n            this.stop();\n            this.start();\n        }\n        return this.remaining;\n    }\n    /**\n   * @returns {boolean}\n   */ isRunning() {\n        return this.running;\n    }\n}\nconst swalStringParams = [\n    \"swal-title\",\n    \"swal-html\",\n    \"swal-footer\"\n];\n/**\n * @param {SweetAlertOptions} params\n * @returns {SweetAlertOptions}\n */ const getTemplateParams = (params)=>{\n    const template = typeof params.template === \"string\" ? /** @type {HTMLTemplateElement} */ document.querySelector(params.template) : params.template;\n    if (!template) {\n        return {};\n    }\n    /** @type {DocumentFragment} */ const templateContent = template.content;\n    showWarningsForElements(templateContent);\n    const result = Object.assign(getSwalParams(templateContent), getSwalFunctionParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));\n    return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {Record<string, any>}\n */ const getSwalParams = (templateContent)=>{\n    /** @type {Record<string, any>} */ const result = {};\n    /** @type {HTMLElement[]} */ const swalParams = Array.from(templateContent.querySelectorAll(\"swal-param\"));\n    swalParams.forEach((param)=>{\n        showWarningsForAttributes(param, [\n            \"name\",\n            \"value\"\n        ]);\n        const paramName = /** @type {keyof SweetAlertOptions} */ param.getAttribute(\"name\");\n        const value = param.getAttribute(\"value\");\n        if (!paramName || !value) {\n            return;\n        }\n        if (typeof defaultParams[paramName] === \"boolean\") {\n            result[paramName] = value !== \"false\";\n        } else if (typeof defaultParams[paramName] === \"object\") {\n            result[paramName] = JSON.parse(value);\n        } else {\n            result[paramName] = value;\n        }\n    });\n    return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {Record<string, any>}\n */ const getSwalFunctionParams = (templateContent)=>{\n    /** @type {Record<string, any>} */ const result = {};\n    /** @type {HTMLElement[]} */ const swalFunctions = Array.from(templateContent.querySelectorAll(\"swal-function-param\"));\n    swalFunctions.forEach((param)=>{\n        const paramName = /** @type {keyof SweetAlertOptions} */ param.getAttribute(\"name\");\n        const value = param.getAttribute(\"value\");\n        if (!paramName || !value) {\n            return;\n        }\n        result[paramName] = new Function(`return ${value}`)();\n    });\n    return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {Record<string, any>}\n */ const getSwalButtons = (templateContent)=>{\n    /** @type {Record<string, any>} */ const result = {};\n    /** @type {HTMLElement[]} */ const swalButtons = Array.from(templateContent.querySelectorAll(\"swal-button\"));\n    swalButtons.forEach((button)=>{\n        showWarningsForAttributes(button, [\n            \"type\",\n            \"color\",\n            \"aria-label\"\n        ]);\n        const type = button.getAttribute(\"type\");\n        if (!type || ![\n            \"confirm\",\n            \"cancel\",\n            \"deny\"\n        ].includes(type)) {\n            return;\n        }\n        result[`${type}ButtonText`] = button.innerHTML;\n        result[`show${capitalizeFirstLetter(type)}Button`] = true;\n        if (button.hasAttribute(\"color\")) {\n            result[`${type}ButtonColor`] = button.getAttribute(\"color\");\n        }\n        if (button.hasAttribute(\"aria-label\")) {\n            result[`${type}ButtonAriaLabel`] = button.getAttribute(\"aria-label\");\n        }\n    });\n    return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {Pick<SweetAlertOptions, 'imageUrl' | 'imageWidth' | 'imageHeight' | 'imageAlt'>}\n */ const getSwalImage = (templateContent)=>{\n    const result = {};\n    /** @type {HTMLElement | null} */ const image = templateContent.querySelector(\"swal-image\");\n    if (image) {\n        showWarningsForAttributes(image, [\n            \"src\",\n            \"width\",\n            \"height\",\n            \"alt\"\n        ]);\n        if (image.hasAttribute(\"src\")) {\n            result.imageUrl = image.getAttribute(\"src\") || undefined;\n        }\n        if (image.hasAttribute(\"width\")) {\n            result.imageWidth = image.getAttribute(\"width\") || undefined;\n        }\n        if (image.hasAttribute(\"height\")) {\n            result.imageHeight = image.getAttribute(\"height\") || undefined;\n        }\n        if (image.hasAttribute(\"alt\")) {\n            result.imageAlt = image.getAttribute(\"alt\") || undefined;\n        }\n    }\n    return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {Record<string, any>}\n */ const getSwalIcon = (templateContent)=>{\n    const result = {};\n    /** @type {HTMLElement | null} */ const icon = templateContent.querySelector(\"swal-icon\");\n    if (icon) {\n        showWarningsForAttributes(icon, [\n            \"type\",\n            \"color\"\n        ]);\n        if (icon.hasAttribute(\"type\")) {\n            result.icon = icon.getAttribute(\"type\");\n        }\n        if (icon.hasAttribute(\"color\")) {\n            result.iconColor = icon.getAttribute(\"color\");\n        }\n        result.iconHtml = icon.innerHTML;\n    }\n    return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {Record<string, any>}\n */ const getSwalInput = (templateContent)=>{\n    /** @type {Record<string, any>} */ const result = {};\n    /** @type {HTMLElement | null} */ const input = templateContent.querySelector(\"swal-input\");\n    if (input) {\n        showWarningsForAttributes(input, [\n            \"type\",\n            \"label\",\n            \"placeholder\",\n            \"value\"\n        ]);\n        result.input = input.getAttribute(\"type\") || \"text\";\n        if (input.hasAttribute(\"label\")) {\n            result.inputLabel = input.getAttribute(\"label\");\n        }\n        if (input.hasAttribute(\"placeholder\")) {\n            result.inputPlaceholder = input.getAttribute(\"placeholder\");\n        }\n        if (input.hasAttribute(\"value\")) {\n            result.inputValue = input.getAttribute(\"value\");\n        }\n    }\n    /** @type {HTMLElement[]} */ const inputOptions = Array.from(templateContent.querySelectorAll(\"swal-input-option\"));\n    if (inputOptions.length) {\n        result.inputOptions = {};\n        inputOptions.forEach((option)=>{\n            showWarningsForAttributes(option, [\n                \"value\"\n            ]);\n            const optionValue = option.getAttribute(\"value\");\n            if (!optionValue) {\n                return;\n            }\n            const optionName = option.innerHTML;\n            result.inputOptions[optionValue] = optionName;\n        });\n    }\n    return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @param {string[]} paramNames\n * @returns {Record<string, any>}\n */ const getSwalStringParams = (templateContent, paramNames)=>{\n    /** @type {Record<string, any>} */ const result = {};\n    for(const i in paramNames){\n        const paramName = paramNames[i];\n        /** @type {HTMLElement | null} */ const tag = templateContent.querySelector(paramName);\n        if (tag) {\n            showWarningsForAttributes(tag, []);\n            result[paramName.replace(/^swal-/, \"\")] = tag.innerHTML.trim();\n        }\n    }\n    return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n */ const showWarningsForElements = (templateContent)=>{\n    const allowedElements = swalStringParams.concat([\n        \"swal-param\",\n        \"swal-function-param\",\n        \"swal-button\",\n        \"swal-image\",\n        \"swal-icon\",\n        \"swal-input\",\n        \"swal-input-option\"\n    ]);\n    Array.from(templateContent.children).forEach((el)=>{\n        const tagName = el.tagName.toLowerCase();\n        if (!allowedElements.includes(tagName)) {\n            warn(`Unrecognized element <${tagName}>`);\n        }\n    });\n};\n/**\n * @param {HTMLElement} el\n * @param {string[]} allowedAttributes\n */ const showWarningsForAttributes = (el, allowedAttributes)=>{\n    Array.from(el.attributes).forEach((attribute)=>{\n        if (allowedAttributes.indexOf(attribute.name) === -1) {\n            warn([\n                `Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`,\n                `${allowedAttributes.length ? `Allowed attributes are: ${allowedAttributes.join(\", \")}` : \"To set the value, use HTML within the element.\"}`\n            ]);\n        }\n    });\n};\nconst SHOW_CLASS_TIMEOUT = 10;\n/**\n * Open popup, add necessary classes and styles, fix scrollbar\n *\n * @param {SweetAlertOptions} params\n */ const openPopup = (params)=>{\n    const container = getContainer();\n    const popup = getPopup();\n    if (typeof params.willOpen === \"function\") {\n        params.willOpen(popup);\n    }\n    globalState.eventEmitter.emit(\"willOpen\", popup);\n    const bodyStyles = window.getComputedStyle(document.body);\n    const initialBodyOverflow = bodyStyles.overflowY;\n    addClasses(container, popup, params);\n    // scrolling is 'hidden' until animation is done, after that 'auto'\n    setTimeout(()=>{\n        setScrollingVisibility(container, popup);\n    }, SHOW_CLASS_TIMEOUT);\n    if (isModal()) {\n        fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);\n        setAriaHidden();\n    }\n    if (!isToast() && !globalState.previousActiveElement) {\n        globalState.previousActiveElement = document.activeElement;\n    }\n    if (typeof params.didOpen === \"function\") {\n        setTimeout(()=>params.didOpen(popup));\n    }\n    globalState.eventEmitter.emit(\"didOpen\", popup);\n    removeClass(container, swalClasses[\"no-transition\"]);\n};\n/**\n * @param {AnimationEvent} event\n */ const swalOpenAnimationFinished = (event)=>{\n    const popup = getPopup();\n    if (event.target !== popup) {\n        return;\n    }\n    const container = getContainer();\n    popup.removeEventListener(\"animationend\", swalOpenAnimationFinished);\n    popup.removeEventListener(\"transitionend\", swalOpenAnimationFinished);\n    container.style.overflowY = \"auto\";\n};\n/**\n * @param {HTMLElement} container\n * @param {HTMLElement} popup\n */ const setScrollingVisibility = (container, popup)=>{\n    if (hasCssAnimation(popup)) {\n        container.style.overflowY = \"hidden\";\n        popup.addEventListener(\"animationend\", swalOpenAnimationFinished);\n        popup.addEventListener(\"transitionend\", swalOpenAnimationFinished);\n    } else {\n        container.style.overflowY = \"auto\";\n    }\n};\n/**\n * @param {HTMLElement} container\n * @param {boolean} scrollbarPadding\n * @param {string} initialBodyOverflow\n */ const fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow)=>{\n    iOSfix();\n    if (scrollbarPadding && initialBodyOverflow !== \"hidden\") {\n        replaceScrollbarWithPadding(initialBodyOverflow);\n    }\n    // sweetalert2/issues/1247\n    setTimeout(()=>{\n        container.scrollTop = 0;\n    });\n};\n/**\n * @param {HTMLElement} container\n * @param {HTMLElement} popup\n * @param {SweetAlertOptions} params\n */ const addClasses = (container, popup, params)=>{\n    addClass(container, params.showClass.backdrop);\n    if (params.animation) {\n        // this workaround with opacity is needed for https://github.com/sweetalert2/sweetalert2/issues/2059\n        popup.style.setProperty(\"opacity\", \"0\", \"important\");\n        show(popup, \"grid\");\n        setTimeout(()=>{\n            // Animate popup right after showing it\n            addClass(popup, params.showClass.popup);\n            // and remove the opacity workaround\n            popup.style.removeProperty(\"opacity\");\n        }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062\n    } else {\n        show(popup, \"grid\");\n    }\n    addClass([\n        document.documentElement,\n        document.body\n    ], swalClasses.shown);\n    if (params.heightAuto && params.backdrop && !params.toast) {\n        addClass([\n            document.documentElement,\n            document.body\n        ], swalClasses[\"height-auto\"]);\n    }\n};\nvar defaultInputValidators = {\n    /**\n   * @param {string} string\n   * @param {string} [validationMessage]\n   * @returns {Promise<string | void>}\n   */ email: (string, validationMessage)=>{\n        return /^[a-zA-Z0-9.+_'-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]+$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || \"Invalid email address\");\n    },\n    /**\n   * @param {string} string\n   * @param {string} [validationMessage]\n   * @returns {Promise<string | void>}\n   */ url: (string, validationMessage)=>{\n        // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013\n        return /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || \"Invalid URL\");\n    }\n};\n/**\n * @param {SweetAlertOptions} params\n */ function setDefaultInputValidators(params) {\n    // Use default `inputValidator` for supported input types if not provided\n    if (params.inputValidator) {\n        return;\n    }\n    if (params.input === \"email\") {\n        params.inputValidator = defaultInputValidators[\"email\"];\n    }\n    if (params.input === \"url\") {\n        params.inputValidator = defaultInputValidators[\"url\"];\n    }\n}\n/**\n * @param {SweetAlertOptions} params\n */ function validateCustomTargetElement(params) {\n    // Determine if the custom target element is valid\n    if (!params.target || typeof params.target === \"string\" && !document.querySelector(params.target) || typeof params.target !== \"string\" && !params.target.appendChild) {\n        warn('Target parameter is not valid, defaulting to \"body\"');\n        params.target = \"body\";\n    }\n}\n/**\n * Set type, text and actions on popup\n *\n * @param {SweetAlertOptions} params\n */ function setParameters(params) {\n    setDefaultInputValidators(params);\n    // showLoaderOnConfirm && preConfirm\n    if (params.showLoaderOnConfirm && !params.preConfirm) {\n        warn(\"showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n\" + \"showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n\" + \"https://sweetalert2.github.io/#ajax-request\");\n    }\n    validateCustomTargetElement(params);\n    // Replace newlines with <br> in title\n    if (typeof params.title === \"string\") {\n        params.title = params.title.split(\"\\n\").join(\"<br />\");\n    }\n    init(params);\n}\n/** @type {SweetAlert} */ let currentInstance;\nvar _promise = /*#__PURE__*/ new WeakMap();\nclass SweetAlert {\n    /**\n   * @param {...any} args\n   * @this {SweetAlert}\n   */ constructor(){\n        /**\n     * @type {Promise<SweetAlertResult>}\n     */ _classPrivateFieldInitSpec(this, _promise, void 0);\n        // Prevent run in Node env\n        if (true) {\n            return;\n        }\n        currentInstance = this;\n        // @ts-ignore\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const outerParams = Object.freeze(this.constructor.argsToParams(args));\n        /** @type {Readonly<SweetAlertOptions>} */ this.params = outerParams;\n        /** @type {boolean} */ this.isAwaitingPromise = false;\n        _classPrivateFieldSet2(_promise, this, this._main(currentInstance.params));\n    }\n    _main(userParams) {\n        let mixinParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        showWarningsForParams(Object.assign({}, mixinParams, userParams));\n        if (globalState.currentInstance) {\n            const swalPromiseResolve = privateMethods.swalPromiseResolve.get(globalState.currentInstance);\n            const { isAwaitingPromise } = globalState.currentInstance;\n            globalState.currentInstance._destroy();\n            if (!isAwaitingPromise) {\n                swalPromiseResolve({\n                    isDismissed: true\n                });\n            }\n            if (isModal()) {\n                unsetAriaHidden();\n            }\n        }\n        globalState.currentInstance = currentInstance;\n        const innerParams = prepareParams(userParams, mixinParams);\n        setParameters(innerParams);\n        Object.freeze(innerParams);\n        // clear the previous timer\n        if (globalState.timeout) {\n            globalState.timeout.stop();\n            delete globalState.timeout;\n        }\n        // clear the restore focus timeout\n        clearTimeout(globalState.restoreFocusTimeout);\n        const domCache = populateDomCache(currentInstance);\n        render(currentInstance, innerParams);\n        privateProps.innerParams.set(currentInstance, innerParams);\n        return swalPromise(currentInstance, domCache, innerParams);\n    }\n    // `catch` cannot be the name of a module export, so we define our thenable methods here instead\n    then(onFulfilled) {\n        return _classPrivateFieldGet2(_promise, this).then(onFulfilled);\n    }\n    finally(onFinally) {\n        return _classPrivateFieldGet2(_promise, this).finally(onFinally);\n    }\n}\n/**\n * @param {SweetAlert} instance\n * @param {DomCache} domCache\n * @param {SweetAlertOptions} innerParams\n * @returns {Promise}\n */ const swalPromise = (instance, domCache, innerParams)=>{\n    return new Promise((resolve, reject)=>{\n        // functions to handle all closings/dismissals\n        /**\n     * @param {DismissReason} dismiss\n     */ const dismissWith = (dismiss)=>{\n            instance.close({\n                isDismissed: true,\n                dismiss\n            });\n        };\n        privateMethods.swalPromiseResolve.set(instance, resolve);\n        privateMethods.swalPromiseReject.set(instance, reject);\n        domCache.confirmButton.onclick = ()=>{\n            handleConfirmButtonClick(instance);\n        };\n        domCache.denyButton.onclick = ()=>{\n            handleDenyButtonClick(instance);\n        };\n        domCache.cancelButton.onclick = ()=>{\n            handleCancelButtonClick(instance, dismissWith);\n        };\n        domCache.closeButton.onclick = ()=>{\n            dismissWith(DismissReason.close);\n        };\n        handlePopupClick(innerParams, domCache, dismissWith);\n        addKeydownHandler(globalState, innerParams, dismissWith);\n        handleInputOptionsAndValue(instance, innerParams);\n        openPopup(innerParams);\n        setupTimer(globalState, innerParams, dismissWith);\n        initFocus(domCache, innerParams);\n        // Scroll container to top on open (#1247, #1946)\n        setTimeout(()=>{\n            domCache.container.scrollTop = 0;\n        });\n    });\n};\n/**\n * @param {SweetAlertOptions} userParams\n * @param {SweetAlertOptions} mixinParams\n * @returns {SweetAlertOptions}\n */ const prepareParams = (userParams, mixinParams)=>{\n    const templateParams = getTemplateParams(userParams);\n    const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams); // precedence is described in #2131\n    params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);\n    params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);\n    if (params.animation === false) {\n        params.showClass = {\n            backdrop: \"swal2-noanimation\"\n        };\n        params.hideClass = {};\n    }\n    return params;\n};\n/**\n * @param {SweetAlert} instance\n * @returns {DomCache}\n */ const populateDomCache = (instance)=>{\n    const domCache = {\n        popup: getPopup(),\n        container: getContainer(),\n        actions: getActions(),\n        confirmButton: getConfirmButton(),\n        denyButton: getDenyButton(),\n        cancelButton: getCancelButton(),\n        loader: getLoader(),\n        closeButton: getCloseButton(),\n        validationMessage: getValidationMessage(),\n        progressSteps: getProgressSteps()\n    };\n    privateProps.domCache.set(instance, domCache);\n    return domCache;\n};\n/**\n * @param {GlobalState} globalState\n * @param {SweetAlertOptions} innerParams\n * @param {Function} dismissWith\n */ const setupTimer = (globalState, innerParams, dismissWith)=>{\n    const timerProgressBar = getTimerProgressBar();\n    hide(timerProgressBar);\n    if (innerParams.timer) {\n        globalState.timeout = new Timer(()=>{\n            dismissWith(\"timer\");\n            delete globalState.timeout;\n        }, innerParams.timer);\n        if (innerParams.timerProgressBar) {\n            show(timerProgressBar);\n            applyCustomClass(timerProgressBar, innerParams, \"timerProgressBar\");\n            setTimeout(()=>{\n                if (globalState.timeout && globalState.timeout.running) {\n                    // timer can be already stopped or unset at this point\n                    animateTimerProgressBar(innerParams.timer);\n                }\n            });\n        }\n    }\n};\n/**\n * Initialize focus in the popup:\n *\n * 1. If `toast` is `true`, don't steal focus from the document.\n * 2. Else if there is an [autofocus] element, focus it.\n * 3. Else if `focusConfirm` is `true` and confirm button is visible, focus it.\n * 4. Else if `focusDeny` is `true` and deny button is visible, focus it.\n * 5. Else if `focusCancel` is `true` and cancel button is visible, focus it.\n * 6. Else focus the first focusable element in a popup (if any).\n *\n * @param {DomCache} domCache\n * @param {SweetAlertOptions} innerParams\n */ const initFocus = (domCache, innerParams)=>{\n    if (innerParams.toast) {\n        return;\n    }\n    // TODO: this is dumb, remove `allowEnterKey` param in the next major version\n    if (!callIfFunction(innerParams.allowEnterKey)) {\n        warnAboutDeprecation(\"allowEnterKey\");\n        blurActiveElement();\n        return;\n    }\n    if (focusAutofocus(domCache)) {\n        return;\n    }\n    if (focusButton(domCache, innerParams)) {\n        return;\n    }\n    setFocus(-1, 1);\n};\n/**\n * @param {DomCache} domCache\n * @returns {boolean}\n */ const focusAutofocus = (domCache)=>{\n    const autofocusElements = Array.from(domCache.popup.querySelectorAll(\"[autofocus]\"));\n    for (const autofocusElement of autofocusElements){\n        if (autofocusElement instanceof HTMLElement && isVisible$1(autofocusElement)) {\n            autofocusElement.focus();\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * @param {DomCache} domCache\n * @param {SweetAlertOptions} innerParams\n * @returns {boolean}\n */ const focusButton = (domCache, innerParams)=>{\n    if (innerParams.focusDeny && isVisible$1(domCache.denyButton)) {\n        domCache.denyButton.focus();\n        return true;\n    }\n    if (innerParams.focusCancel && isVisible$1(domCache.cancelButton)) {\n        domCache.cancelButton.focus();\n        return true;\n    }\n    if (innerParams.focusConfirm && isVisible$1(domCache.confirmButton)) {\n        domCache.confirmButton.focus();\n        return true;\n    }\n    return false;\n};\nconst blurActiveElement = ()=>{\n    if (document.activeElement instanceof HTMLElement && typeof document.activeElement.blur === \"function\") {\n        document.activeElement.blur();\n    }\n};\n// Dear russian users visiting russian sites. Let's have fun.\nif (false) {}\n// Assign instance methods from src/instanceMethods/*.js to prototype\nSweetAlert.prototype.disableButtons = disableButtons;\nSweetAlert.prototype.enableButtons = enableButtons;\nSweetAlert.prototype.getInput = getInput;\nSweetAlert.prototype.disableInput = disableInput;\nSweetAlert.prototype.enableInput = enableInput;\nSweetAlert.prototype.hideLoading = hideLoading;\nSweetAlert.prototype.disableLoading = hideLoading;\nSweetAlert.prototype.showValidationMessage = showValidationMessage;\nSweetAlert.prototype.resetValidationMessage = resetValidationMessage;\nSweetAlert.prototype.close = close;\nSweetAlert.prototype.closePopup = close;\nSweetAlert.prototype.closeModal = close;\nSweetAlert.prototype.closeToast = close;\nSweetAlert.prototype.rejectPromise = rejectPromise;\nSweetAlert.prototype.update = update;\nSweetAlert.prototype._destroy = _destroy;\n// Assign static methods from src/staticMethods/*.js to constructor\nObject.assign(SweetAlert, staticMethods);\n// Proxy to instance methods to constructor, for now, for backwards compatibility\nObject.keys(instanceMethods).forEach((key)=>{\n    /**\n   * @param {...any} args\n   * @returns {any | undefined}\n   */ SweetAlert[key] = function() {\n        if (currentInstance && currentInstance[key]) {\n            return currentInstance[key](...arguments);\n        }\n        return null;\n    };\n});\nSweetAlert.DismissReason = DismissReason;\nSweetAlert.version = \"11.17.2\";\nconst Swal = SweetAlert;\n// @ts-ignore\nSwal.default = Swal;\n\n\"undefined\" != typeof document && function(e, t) {\n    var n = e.createElement(\"style\");\n    if (e.getElementsByTagName(\"head\")[0].appendChild(n), n.styleSheet) n.styleSheet.disabled || (n.styleSheet.cssText = t);\n    else try {\n        n.innerHTML = t;\n    } catch (e) {\n        n.innerText = t;\n    }\n}(document, ':root{--swal2-container-padding: 0.625em;--swal2-backdrop: rgba(0, 0, 0, 0.4);--swal2-width: 32em;--swal2-padding: 0 0 1.25em;--swal2-border: none;--swal2-border-radius: 0.3125rem;--swal2-background: white;--swal2-color: #545454;--swal2-footer-border-color: #eee;--swal2-show-animation: swal2-show 0.3s;--swal2-hide-animation: swal2-hide 0.15s forwards;--swal2-input-background: transparent;--swal2-progress-step-background: #add8e6;--swal2-validation-message-background: #f0f0f0;--swal2-validation-message-color: #666;--swal2-close-button-position: initial;--swal2-close-button-inset: auto;--swal2-close-button-font-size: 2.5em;--swal2-close-button-color: #ccc}[data-swal2-theme=dark]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}@media(prefers-color-scheme: dark){[data-swal2-theme=auto]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px var(--swal2-backdrop)}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{inset:0 auto auto 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{inset:0 0 auto auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{inset:0 auto auto 0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{inset:50% auto auto 0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{inset:50% auto auto 50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{inset:50% 0 auto auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{inset:auto auto 0 0}body.swal2-toast-shown .swal2-container.swal2-bottom{inset:auto auto 0 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{inset:auto 0 0 auto}@media print{body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown) .swal2-container{position:static !important}}div:where(.swal2-container){display:grid;position:fixed;z-index:1060;inset:0;box-sizing:border-box;grid-template-areas:\"top-start     top            top-end\" \"center-start  center         center-end\" \"bottom-start  bottom-center  bottom-end\";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:var(--swal2-container-padding);overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}div:where(.swal2-container).swal2-backdrop-show,div:where(.swal2-container).swal2-noanimation{background:var(--swal2-backdrop)}div:where(.swal2-container).swal2-backdrop-hide{background:rgba(0,0,0,0) !important}div:where(.swal2-container).swal2-top-start,div:where(.swal2-container).swal2-center-start,div:where(.swal2-container).swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}div:where(.swal2-container).swal2-top,div:where(.swal2-container).swal2-center,div:where(.swal2-container).swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}div:where(.swal2-container).swal2-top-end,div:where(.swal2-container).swal2-center-end,div:where(.swal2-container).swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}div:where(.swal2-container).swal2-top-start>.swal2-popup{align-self:start}div:where(.swal2-container).swal2-top>.swal2-popup{grid-column:2;place-self:start center}div:where(.swal2-container).swal2-top-end>.swal2-popup,div:where(.swal2-container).swal2-top-right>.swal2-popup{grid-column:3;place-self:start end}div:where(.swal2-container).swal2-center-start>.swal2-popup,div:where(.swal2-container).swal2-center-left>.swal2-popup{grid-row:2;align-self:center}div:where(.swal2-container).swal2-center>.swal2-popup{grid-column:2;grid-row:2;place-self:center center}div:where(.swal2-container).swal2-center-end>.swal2-popup,div:where(.swal2-container).swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;place-self:center end}div:where(.swal2-container).swal2-bottom-start>.swal2-popup,div:where(.swal2-container).swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}div:where(.swal2-container).swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;place-self:end center}div:where(.swal2-container).swal2-bottom-end>.swal2-popup,div:where(.swal2-container).swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;place-self:end end}div:where(.swal2-container).swal2-grow-row>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}div:where(.swal2-container).swal2-grow-column>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}div:where(.swal2-container).swal2-no-transition{transition:none !important}div:where(.swal2-container) div:where(.swal2-popup){display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:var(--swal2-width);max-width:100%;padding:var(--swal2-padding);border:var(--swal2-border);border-radius:var(--swal2-border-radius);background:var(--swal2-background);color:var(--swal2-color);font-family:inherit;font-size:1rem}div:where(.swal2-container) div:where(.swal2-popup):focus{outline:none}div:where(.swal2-container) div:where(.swal2-popup).swal2-loading{overflow-y:hidden}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable{cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable div:where(.swal2-icon){cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging{cursor:grabbing}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging div:where(.swal2-icon){cursor:grabbing}div:where(.swal2-container) h2:where(.swal2-title){position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word;cursor:initial}div:where(.swal2-container) div:where(.swal2-actions){display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}div:where(.swal2-container) div:where(.swal2-loader){display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}div:where(.swal2-container) button:where(.swal2-styled){margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}div:where(.swal2-container) button:where(.swal2-styled):not([disabled]){cursor:pointer}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm){border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):focus-visible{box-shadow:0 0 0 3px rgba(112,102,224,.5)}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny){border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):focus-visible{box-shadow:0 0 0 3px rgba(220,55,65,.5)}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel){border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):focus-visible{box-shadow:0 0 0 3px rgba(110,120,129,.5)}div:where(.swal2-container) button:where(.swal2-styled).swal2-default-outline:focus-visible{box-shadow:0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) button:where(.swal2-styled):focus-visible{outline:none}div:where(.swal2-container) button:where(.swal2-styled)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-footer){margin:1em 0 0;padding:1em 1em 0;border-top:1px solid var(--swal2-footer-border-color);color:inherit;font-size:1em;text-align:center;cursor:initial}div:where(.swal2-container) .swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:var(--swal2-border-radius);border-bottom-left-radius:var(--swal2-border-radius)}div:where(.swal2-container) div:where(.swal2-timer-progress-bar){width:100%;height:.25em;background:rgba(0,0,0,.2)}div:where(.swal2-container) img:where(.swal2-image){max-width:100%;margin:2em auto 1em;cursor:initial}div:where(.swal2-container) button:where(.swal2-close){position:var(--swal2-close-button-position);inset:var(--swal2-close-button-inset);z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:var(--swal2-border-radius);background:rgba(0,0,0,0);color:var(--swal2-close-button-color);font-family:monospace;font-size:var(--swal2-close-button-font-size);cursor:pointer;justify-self:end}div:where(.swal2-container) button:where(.swal2-close):hover{transform:none;background:rgba(0,0,0,0);color:#f27474}div:where(.swal2-container) button:where(.swal2-close):focus-visible{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) button:where(.swal2-close)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-html-container){z-index:1;justify-content:center;margin:0;padding:1em 1.6em .3em;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word;cursor:initial}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea),div:where(.swal2-container) select:where(.swal2-select),div:where(.swal2-container) div:where(.swal2-radio),div:where(.swal2-container) label:where(.swal2-checkbox){margin:1em 2em 3px}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea){box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:var(--swal2-input-background);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}div:where(.swal2-container) input:where(.swal2-input).swal2-inputerror,div:where(.swal2-container) input:where(.swal2-file).swal2-inputerror,div:where(.swal2-container) textarea:where(.swal2-textarea).swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}div:where(.swal2-container) input:where(.swal2-input):focus,div:where(.swal2-container) input:where(.swal2-file):focus,div:where(.swal2-container) textarea:where(.swal2-textarea):focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) input:where(.swal2-input)::placeholder,div:where(.swal2-container) input:where(.swal2-file)::placeholder,div:where(.swal2-container) textarea:where(.swal2-textarea)::placeholder{color:#ccc}div:where(.swal2-container) .swal2-range{margin:1em 2em 3px;background:var(--swal2-background)}div:where(.swal2-container) .swal2-range input{width:80%}div:where(.swal2-container) .swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}div:where(.swal2-container) .swal2-range input,div:where(.swal2-container) .swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}div:where(.swal2-container) .swal2-input{height:2.625em;padding:0 .75em}div:where(.swal2-container) .swal2-file{width:75%;margin-right:auto;margin-left:auto;background:var(--swal2-input-background);font-size:1.125em}div:where(.swal2-container) .swal2-textarea{height:6.75em;padding:.75em}div:where(.swal2-container) .swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:var(--swal2-input-background);color:inherit;font-size:1.125em}div:where(.swal2-container) .swal2-radio,div:where(.swal2-container) .swal2-checkbox{align-items:center;justify-content:center;background:var(--swal2-background);color:inherit}div:where(.swal2-container) .swal2-radio label,div:where(.swal2-container) .swal2-checkbox label{margin:0 .6em;font-size:1.125em}div:where(.swal2-container) .swal2-radio input,div:where(.swal2-container) .swal2-checkbox input{flex-shrink:0;margin:0 .4em}div:where(.swal2-container) label:where(.swal2-input-label){display:flex;justify-content:center;margin:1em auto 0}div:where(.swal2-container) div:where(.swal2-validation-message){align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:var(--swal2-validation-message-background);color:var(--swal2-validation-message-color);font-size:1em;font-weight:300}div:where(.swal2-container) div:where(.swal2-validation-message)::before{content:\"!\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}div:where(.swal2-container) .swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}div:where(.swal2-container) .swal2-progress-steps li{display:inline-block;position:relative}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:var(--swal2-progress-step-background);color:#fff}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:var(--swal2-progress-step-background)}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}div:where(.swal2-icon){position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}div:where(.swal2-icon) .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}div:where(.swal2-icon).swal2-error{border-color:#f27474;color:#f27474}div:where(.swal2-icon).swal2-error .swal2-x-mark{position:relative;flex-grow:1}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}div:where(.swal2-icon).swal2-warning{border-color:#f8bb86;color:#f8bb86}div:where(.swal2-icon).swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}div:where(.swal2-icon).swal2-info{border-color:#3fc3ee;color:#3fc3ee}div:where(.swal2-icon).swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}div:where(.swal2-icon).swal2-question{border-color:#87adbd;color:#87adbd}div:where(.swal2-icon).swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}div:where(.swal2-icon).swal2-success{border-color:#a5dc86;color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;border-radius:50%}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}div:where(.swal2-icon).swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}div:where(.swal2-icon).swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:var(--swal2-show-animation)}.swal2-hide{animation:var(--swal2-hide-animation)}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:var(--swal2-background);box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-toast>*{grid-column:2}.swal2-toast h2:where(.swal2-title){margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-toast .swal2-loading{justify-content:center}.swal2-toast input:where(.swal2-input){height:2em;margin:.5em;font-size:1em}.swal2-toast .swal2-validation-message{font-size:1em}.swal2-toast div:where(.swal2-footer){margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-toast button:where(.swal2-close){grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-toast div:where(.swal2-html-container){margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-toast div:where(.swal2-html-container):empty{padding:0}.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-toast div:where(.swal2-actions){justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-toast button:where(.swal2-styled){margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;border-radius:50%}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sweetalert2/dist/sweetalert2.esm.all.js\n");

/***/ })

};
;